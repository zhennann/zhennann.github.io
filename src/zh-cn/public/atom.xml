<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EggBorn.js</title>
  
  <subtitle>一款顶级Javascript全栈开发框架</subtitle>
  <link href="/zh-cn/atom.xml" rel="self"/>
  
  <link href="http://egg-born.org/zh-cn/"/>
  <updated>2017-11-13T10:52:15.162Z</updated>
  <id>http://egg-born.org/zh-cn/</id>
  
  <author>
    <name>zhennann</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EggBorn.js Showcase - Watch Articles</title>
    <link href="http://egg-born.org/zh-cn/showcase/watcharticles/"/>
    <id>http://egg-born.org/zh-cn/showcase/watcharticles/</id>
    <published>2017-11-13T10:05:20.000Z</published>
    <updated>2017-11-13T10:52:15.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EggBorn-js-Showcase-Watch-Articles"><a href="#EggBorn-js-Showcase-Watch-Articles" class="headerlink" title="EggBorn.js Showcase: Watch Articles"></a>EggBorn.js Showcase: Watch Articles</h1><p>这是EggBorn.js的案例，同时也是一个强大的工具，可以自动抓取文章的统计数字，诸如visits、 stars、 replies，等等。 </p><blockquote><p>Vue.js + Framework7 + Koa.js + Egg.js + MySQL + GitHub Passport</p></blockquote><h2 id="主要演示特性"><a href="#主要演示特性" class="headerlink" title="主要演示特性"></a>主要演示特性</h2><ul><li>模块异步加载</li><li>Framework7 Tabs View布局</li><li>全局Indicator显示与隐藏</li><li>“上拉刷新”与“下拉加载”</li><li>LoadMore组件设计</li><li>Form validate</li><li>Login页面跳转逻辑</li><li>GitHub Passport整合</li></ul><h2 id="体验案例"><a href="#体验案例" class="headerlink" title="体验案例"></a>体验案例</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><ul><li>网址：<a href="http://wa.egg-born.org" target="_blank" rel="external">http://wa.egg-born.org</a></li><li>二维码：</li></ul><p><br>    <img width="200" src="/zh-cn/images/wa/qrcode.png"><br></p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><br>    <img width="200" src="/zh-cn/images/wa/1.jpg"><br></p><br><p><br>    <img width="200" src="/zh-cn/images/wa/2.jpg"><br></p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>将文章添加进系统，系统会使用相应的模式代码自动抓取文章的统计数字。如果没有相应的模式代码，您也可以创建一个。</p><h3 id="模式库"><a href="#模式库" class="headerlink" title="模式库"></a>模式库</h3><p>欢迎fork仓库<a href="https://github.com/zhennann/watch-articles" target="_blank" rel="external">watch-articles</a>，创建您自己的模块代码，提交<a href="https://github.com/zhennann/watch-articles/pulls" target="_blank" rel="external">PR</a>，然后发布到这里！</p><table><thead><tr><th style="text-align:left">模式代码</th><th style="text-align:left">作者</th></tr></thead><tbody><tr><td style="text-align:left">github-repo</td><td style="text-align:left"><img width="20" height="20" src="https://avatars2.githubusercontent.com/u/24246985?s=40&v=4"> <a href="https://github.com/zhennann" target="_blank" rel="external">zhennann</a></td></tr><tr><td style="text-align:left">cnode-topic</td><td style="text-align:left"><img width="20" height="20" src="https://avatars2.githubusercontent.com/u/24246985?s=40&v=4"> <a href="https://github.com/zhennann" target="_blank" rel="external">zhennann</a></td></tr><tr><td style="text-align:left">juejin-im-post</td><td style="text-align:left"><img width="20" height="20" src="https://avatars2.githubusercontent.com/u/24246985?s=40&v=4"> <a href="https://github.com/zhennann" target="_blank" rel="external">zhennann</a></td></tr></tbody></table><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure><h3 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h3><p>修改文件: <code>src/backend/config/config.default.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mysql</span></div><div class="line">config.mysql = &#123;</div><div class="line">  clients: &#123;</div><div class="line">    <span class="comment">// donot change the name  </span></div><div class="line">    __ebdb: &#123;</div><div class="line">      host: <span class="string">'127.0.0.1'</span>,</div><div class="line">      port: <span class="string">'3306'</span>,</div><div class="line">      user: <span class="string">'travis'</span>,</div><div class="line">      password: <span class="string">''</span>,</div><div class="line">      database: <span class="string">'watch-articles'</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>启动后端服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev:backend</div></pre></td></tr></table></figure></p><p>启动前端服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev:front</div></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm run <span class="built_in">test</span>:backend</div><div class="line">$ npm run cov:backend</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EggBorn-js-Showcase-Watch-Articles&quot;&gt;&lt;a href=&quot;#EggBorn-js-Showcase-Watch-Articles&quot; class=&quot;headerlink&quot; title=&quot;EggBorn.js Showcase: Wat
      
    
    </summary>
    
      <category term="showcase" scheme="http://egg-born.org/zh-cn/categories/showcase/"/>
    
    
  </entry>
  
  <entry>
    <title>EggBorn.js开发指南</title>
    <link href="http://egg-born.org/zh-cn/docs/tutorial/"/>
    <id>http://egg-born.org/zh-cn/docs/tutorial/</id>
    <published>2017-10-17T10:18:14.000Z</published>
    <updated>2017-11-13T10:28:16.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EggBorn-js是什么"><a href="#EggBorn-js是什么" class="headerlink" title="EggBorn.js是什么"></a>EggBorn.js是什么</h2><blockquote><p>EggBorn.js是一款顶级Javascript全栈开发框架。</p></blockquote><p>EggBorn.js是采用Javascript进行全栈开发的最佳实践。<br>EggBorn.js不重复造轮子，而是采用业界最新的开源技术，进行全栈开发的最佳组合。<br>EggBorn.js前端采用Vue.js + Framework7 / Vue Router + Webpack，后端采用Koa.js + Egg.js，数据库采用mysql。<br>EggBorn.js时刻跟踪开源技术的最新成果，并持续优化，使整个框架时刻保持最佳状态。</p><h2 id="EggBorn-js重点解决什么问题：业务模块化"><a href="#EggBorn-js重点解决什么问题：业务模块化" class="headerlink" title="EggBorn.js重点解决什么问题：业务模块化"></a>EggBorn.js重点解决什么问题：业务模块化</h2><p>Javascript技术的蓬勃发展，为前后端开发带来了更顺畅的体验，显著提升了开发效率。但仍有网友质疑Javascript能否胜任大型Web应用的开发。大型Web应用的特点是随着业务的增长，需要开发大量的页面组件。面对这种场景，一般有两种解决方案：</p><blockquote><p>1 采用单页面的构建方式，缺点是产生的部署包很大。<br>2 采用页面异步加载方式，缺点是页面过于零散，需要频繁与后端交互。</p></blockquote><p>EggBorn.js实现了第三种解决方案：</p><blockquote><p>3 页面组件按业务需求归类，进行模块化，并且实现了模块的异步加载机制，从而弥合了前两种解决方案的缺点，完美满足大型Web应用业务持续增长的需求。</p></blockquote><h2 id="EggBorn-js的技术特点"><a href="#EggBorn-js的技术特点" class="headerlink" title="EggBorn.js的技术特点"></a>EggBorn.js的技术特点</h2><ul><li><strong>业务模块化</strong>：页面组件按模块组织</li><li><strong>加载方式灵活</strong>：模块既可异步加载，也可同步加载</li><li><strong>模块高度内聚</strong>：模块包括前端页面组件和后端业务逻辑</li><li><strong>参数配置灵活</strong>：模块中的前后端可以单独进行参数配置</li><li><strong>国际化</strong>：模块中的前后端均支持独立的国际化</li><li><strong>模块隔离</strong>：模块的页面、数据、逻辑、路由、配置等元素均进行了命名空间隔离处理，避免模块之间的变量污染与冲突</li><li><strong>超级易用的事务处理</strong>：只需在路由记录上配置一个参数，即可完美实现数据库的事务处理。</li><li><strong>渐进式开发</strong>：由于模块的高度内聚，可以将业务以模块的形式沉淀，在多个项目中重复使用，既可贡献到npm开源社区，也可部署到公司内部私有npm仓库。</li></ul><blockquote><p>有了EggBorn.js，从此可复用的不仅仅是组件，还有业务模块。</p></blockquote><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="安装EggBorn-js脚手架"><a href="#安装EggBorn-js脚手架" class="headerlink" title="安装EggBorn.js脚手架"></a>安装EggBorn.js脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g egg-born</div></pre></td></tr></table></figure><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ egg-born project_name</div><div class="line">$ <span class="built_in">cd</span> project_name</div><div class="line">$ npm install</div></pre></td></tr></table></figure><blockquote><p>EggBorn.js目前提供了2个项目脚手架，分别是</p><ul><li><code>front-backend-mysql</code>  – 前后端全栈项目模板</li><li><code>front</code>                – 前端项目模板，后端可采用其他方案</li></ul></blockquote><h3 id="配置mysql连接参数"><a href="#配置mysql连接参数" class="headerlink" title="配置mysql连接参数"></a>配置mysql连接参数</h3><p>如果采用了<code>front-backend-mysql</code>模板，请配置mysql连接参数（空数据库即可）</p><p>编辑<code>src/backend/config/config.default.js</code>文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mysql</span></div><div class="line">config.mysql = &#123;</div><div class="line">  clients: &#123;</div><div class="line">    <span class="comment">// donot change the name  </span></div><div class="line">    __ebdb: &#123;</div><div class="line">      host: <span class="string">'127.0.0.1'</span>,</div><div class="line">      port: <span class="string">'3306'</span>,</div><div class="line">      user: <span class="string">'travis'</span>,</div><div class="line">      password: <span class="string">''</span>,</div><div class="line">      database: <span class="string">'egg-born'</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>启动后端服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev:backend</div></pre></td></tr></table></figure></p><p>启动前端服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev:front</div></pre></td></tr></table></figure></p><h2 id="EggBorn-js架构图"><a href="#EggBorn-js架构图" class="headerlink" title="EggBorn.js架构图"></a>EggBorn.js架构图</h2><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/zh-cn/images/EggBornJS.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="项目文件结构"><a href="#项目文件结构" class="headerlink" title="项目文件结构"></a>项目文件结构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/zh-cn/images/structure.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="模块文件结构"><a href="#模块文件结构" class="headerlink" title="模块文件结构"></a>模块文件结构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/zh-cn/images/privatemodule.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/zh-cn/images/publicmodule.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="模块开发"><a href="#模块开发" class="headerlink" title="模块开发"></a>模块开发</h2><h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><p>为了不断沉淀业务模块，达到高度可复用的效果，所有模块的命名空间必须充分隔离，避免相互污染与冲突，故采用如下命名方式：</p><blockquote><p>egg-born-module-{providerId}-{moduleName}</p></blockquote><p>如模块<code>egg-born-module-a-version</code>，各环节命名信息如下：</p><blockquote><ul><li><code>providerId</code>: a</li><li><code>moduleName</code>: version</li><li><code>fullName</code>: egg-born-module-a-version</li><li><code>relativeName</code>: a-version</li><li>前端页面路由地址: /a/version/{page}</li><li>后端API路由地址: /a/version/{controller}/{action}</li></ul></blockquote><h3 id="加载机制"><a href="#加载机制" class="headerlink" title="加载机制"></a>加载机制</h3><p>模块既支持异步加载，也支持同步加载。默认是异步加载，如果要同步加载，只需在模块名称后面加上<code>-sync</code>后缀，如模块<code>egg-born-module-aa-login-sync</code>。</p><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p>进入<code>src/module</code>目录执行脚手架，创建模块文件骨架<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ egg-born module_relative_name</div></pre></td></tr></table></figure></p><blockquote><p>EggBorn.js目前提供了2个模块脚手架，分别是</p><ul><li><code>module</code>               – 全栈模块模板</li><li><code>module-front</code>         – 前端模块模板</li></ul></blockquote><h3 id="模块前端开发"><a href="#模块前端开发" class="headerlink" title="模块前端开发"></a>模块前端开发</h3><h4 id="前端页面路由"><a href="#前端页面路由" class="headerlink" title="前端页面路由"></a>前端页面路由</h4><p>在<code>front/src/routes.js</code>中添加页面路由，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">`./pages/<span class="subst">$&#123;name&#125;</span>.vue`</span>).default;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'welcome/:who'</span>, <span class="attr">component</span>: load(<span class="string">'welcome'</span>) &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'profile'</span>, <span class="attr">component</span>: load(<span class="string">'profile'</span>), <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125; &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: load(<span class="string">'login'</span>) &#125;,</div><div class="line">];</div></pre></td></tr></table></figure></p><blockquote><ul><li><code>path</code>: 路径，支持参数。以<code>/</code>开头，代表根页面组件。<code>login</code>页面组件通常这样配置</li><li><code>component</code>: 页面组件对象</li><li><code>meta</code>: 路由元数据</li><li><code>meta.requiresAuth</code>: 如果页面组件需要登录，须设为<code>true</code></li></ul></blockquote><p>在页面中引用页面组件，请使用绝对路径，如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">f7-list-item</span> <span class="attr">link</span>=<span class="string">"/aa/hello/welcome/You"</span> <span class="attr">title</span>=<span class="string">"Welcome"</span>&gt;</span><span class="tag">&lt;/<span class="name">f7-list-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">f7-list-item</span> <span class="attr">link</span>=<span class="string">"/aa/hello/profile"</span> <span class="attr">title</span>=<span class="string">"Profile"</span>&gt;</span><span class="tag">&lt;/<span class="name">f7-list-item</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="前端状态管理"><a href="#前端状态管理" class="headerlink" title="前端状态管理"></a>前端状态管理</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。EggBorn.js采用Vuex实现了完全隔离的模块状态管理机制。<br>在<code>front/src/store.js</code>中添加状态，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    state: &#123;</div><div class="line">      message: <span class="string">'hello world'</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在页面组件中访问本模块状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> message = <span class="keyword">this</span>.$local.state.message;</div></pre></td></tr></table></figure></p><p>在页面组件中访问其他模块状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> message = <span class="keyword">this</span>.$store.state[providerId][moduleName].message;</div></pre></td></tr></table></figure></p><blockquote><p>更多信息，请参阅: <a href="https://vuex.vuejs.org/" target="_blank" rel="external">Vuex</a></p></blockquote><h4 id="前端参数配置"><a href="#前端参数配置" class="headerlink" title="前端参数配置"></a>前端参数配置</h4><p>在<code>front/src/config/config.js</code>中添加配置信息，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  mode: <span class="number">1</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>只支持在页面组件中访问本模块内部的参数配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mode = <span class="keyword">this</span>.$config.mode;</div></pre></td></tr></table></figure></p><h4 id="前端国际化"><a href="#前端国际化" class="headerlink" title="前端国际化"></a>前端国际化</h4><p>在<code>front/src/config/locale</code>目录添加国际化文件<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  mode: <span class="string">'模式'</span>,</div><div class="line">  <span class="string">"Hello world! I'm %s."</span>: <span class="string">'您好，世界！我是%s。'</span>,  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>国际化语言采取全局合并的方式，有利于语言资源的共享，在页面组件中访问方式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mode = <span class="keyword">this</span>.$text(<span class="string">'mode'</span>);</div><div class="line"><span class="keyword">const</span> message = <span class="keyword">this</span>.$text(<span class="string">"Hello world! I'm %s."</span>,<span class="string">'zhennann'</span>);</div></pre></td></tr></table></figure></p><h3 id="模块后端开发"><a href="#模块后端开发" class="headerlink" title="模块后端开发"></a>模块后端开发</h3><h4 id="后端api路由"><a href="#后端api路由" class="headerlink" title="后端api路由"></a>后端api路由</h4><p>在<code>backend/src/routes.js</code>中添加api路由，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">'./controller/home.js'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = [</div><div class="line">  &#123; <span class="attr">method</span>: <span class="string">'get'</span>, <span class="attr">path</span>: <span class="string">'home/index'</span>, <span class="attr">controller</span>: home, <span class="attr">action</span>: <span class="string">'index'</span>, <span class="attr">transaction</span>: <span class="literal">true</span> &#125;,</div><div class="line">];</div></pre></td></tr></table></figure></p><blockquote><ul><li><code>method</code>: get/post等方法</li><li><code>path</code>: 路径，支持参数</li><li><code>component</code>: Controller对象</li><li><code>action</code>: Controller方法，如果不设置，则自动采用path尾部单词</li><li><code>transaction</code>: 默认为false，如果设为true，则启用数据库事务</li></ul></blockquote><p>在前端页面组件中访问本模块api路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$api.get(<span class="string">'home/index'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>在前端页面组件中访问其他模块api路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$api.get(<span class="string">'/providerId/moduleName/home/index'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h4 id="后端Controller"><a href="#后端Controller" class="headerlink" title="后端Controller"></a>后端Controller</h4><p>后端Controller的实现方式与Egg.js保持一致<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">app</span>.<span class="title">Controller</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">async</span> index() &#123;</div><div class="line">      <span class="keyword">const</span> message = <span class="keyword">await</span> <span class="keyword">this</span>.service.home.index();</div><div class="line">      <span class="keyword">this</span>.ctx.success(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> HomeController;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><blockquote><p>更多信息，请参阅: <a href="https://eggjs.org/zh-cn/basics/controller.html" target="_blank" rel="external">Egg.js Controller</a></p></blockquote><h4 id="后端Service"><a href="#后端Service" class="headerlink" title="后端Service"></a>后端Service</h4><p>Service用于封装业务逻辑，供Controller调用，实现方式与Egg.js保持一致。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">app</span>.<span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">async</span> index() &#123;</div><div class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.db.queryOne(<span class="string">'show tables'</span>);</div><div class="line">      <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Home;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><blockquote><p>与Egg.js不同之处在于，Service使用<code>ctx.db</code>操作数据库，从而自动支持数据库事务。</p><p>更多信息，请参阅: <a href="https://eggjs.org/zh-cn/basics/service.html" target="_blank" rel="external">Egg.js Service</a></p></blockquote><h4 id="后端Controller调用"><a href="#后端Controller调用" class="headerlink" title="后端Controller调用"></a>后端Controller调用</h4><p>为了支持大型Web系统的开发，EggBorn.js支持模块后端Controller之间的调用，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> message = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.performAction(&#123;</div><div class="line">  method: <span class="string">'get'</span>,</div><div class="line">  url: <span class="string">'home/index'</span>,</div><div class="line">  query: &#123;</div><div class="line">    username: <span class="string">'kevin'</span>,</div><div class="line">  &#125;,</div><div class="line">  params: &#123;</div><div class="line">    mode: <span class="number">1</span>,</div><div class="line">  &#125;,</div><div class="line">  body: &#123;</div><div class="line">    content: <span class="string">'ready'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><blockquote><ul><li><code>method</code>: get/post等方法</li><li><code>url</code>: 访问本模块的Controller使用相对路径，访问其他模块的Controller使用以<code>/</code>开头的绝对路径。</li><li><code>query</code>、<code>params</code>、<code>body</code>: 与常规的Controller参数保持一致</li></ul></blockquote><h4 id="后端数据库操作"><a href="#后端数据库操作" class="headerlink" title="后端数据库操作"></a>后端数据库操作</h4><p>后端数据库操作与Egg.js保持一致</p><blockquote><p>更多信息，请参阅: <a href="https://eggjs.org/zh-cn/tutorials/mysql.html" target="_blank" rel="external">Egg.js MySQL</a></p></blockquote><h4 id="后端数据库事务"><a href="#后端数据库事务" class="headerlink" title="后端数据库事务"></a>后端数据库事务</h4><p>EggBorn.js提供了更为便利的数据库事务实现方式，只需在后端api路由记录中配置<code>transaction</code>参数，Service使用<code>ctx.db</code>操作数据库。<br>如果是主Controller通过<code>ctx.performAction</code>调用子Controller，数据库事务开启规则如下：</p><table><thead><tr><th style="text-align:left">主Controller配置</th><th style="text-align:left">子Controller配置</th><th style="text-align:left">子Controller实际启用</th></tr></thead><tbody><tr><td style="text-align:left">true</td><td style="text-align:left">true</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">true</td><td style="text-align:left">false</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">false</td><td style="text-align:left">true</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">false</td><td style="text-align:left">false</td><td style="text-align:left">false</td></tr></tbody></table><h4 id="后端参数配置"><a href="#后端参数配置" class="headerlink" title="后端参数配置"></a>后端参数配置</h4><p>在<code>backend/src/config/config.js</code>中添加配置信息，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> config = &#123;&#125;;</div><div class="line"></div><div class="line">  config.message = <span class="string">"Hello world! I'm %s."</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>访问本模块内部的参数配置示例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> message = <span class="keyword">this</span>.ctx.config.message;</div></pre></td></tr></table></figure></p><h4 id="后端国际化"><a href="#后端国际化" class="headerlink" title="后端国际化"></a>后端国际化</h4><p>在<code>backend/src/config/locale</code>目录添加国际化文件<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">"Hello world! I'm %s."</span>: <span class="string">'您好，世界！我是%s。'</span>,</div><div class="line">  <span class="string">'not found'</span>: <span class="string">'未发现'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>国际化语言采取全局合并的方式，有利于语言资源的共享，访问方式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> notFound = <span class="keyword">this</span>.ctx.text(<span class="string">'not found'</span>);</div><div class="line"><span class="keyword">const</span> message = <span class="keyword">this</span>.ctx.text(<span class="string">"Hello world! I'm %s."</span>, <span class="string">'zhennann'</span>);</div></pre></td></tr></table></figure></p><h4 id="后端错误处理"><a href="#后端错误处理" class="headerlink" title="后端错误处理"></a>后端错误处理</h4><p>在<code>backend/src/config/errors.js</code>文件中添加错误代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// error code should start from 1001</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="number">1001</span>: <span class="string">'not found'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>返回错误信息示例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.ctx.fail(<span class="number">1001</span>);</div></pre></td></tr></table></figure></p><p>也可抛出异常示例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.ctx.throw(<span class="number">1001</span>);</div></pre></td></tr></table></figure></p><h2 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h2><h3 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h3><p>EggBorn.js通过<code>package.json</code>文件管理模块依赖关系。<br>比如，模块<code>aa-module1</code>依赖<code>aa-module2</code>，需要在模块<code>aa-module1</code>的<code>package.json</code>文件中作如下配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"egg-born-module-aa-module1"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"eggBornModule"</span>: &#123;</div><div class="line">    <span class="attr">"dependencies"</span>: &#123;</div><div class="line">      <span class="attr">"aa-module2"</span>: <span class="string">"0.0.1"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"egg-born-module-aa-module2"</span>: <span class="string">"^0.0.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>设置<code>&quot;egg-born-module-aa-module2&quot;: &quot;^0.0.1&quot;</code>，是为了在安装模块<code>aa-module1</code>时自动安装模块<code>aa-module2</code>。如果模块没有公开发布，就不必设置。</p></blockquote><h3 id="模块数据版本"><a href="#模块数据版本" class="headerlink" title="模块数据版本"></a>模块数据版本</h3><p>模块一般都要操作数据库，当模块版本升级时，数据库结构也有可能变动。EggBorn.js实现了模块数据版本的管理，便于业务模块的积累沉淀。</p><p>在模块的<code>package.json</code>文件中配置<code>fileVersion</code>为当前数据版本<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"egg-born-module-aa-module1"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"eggBornModule"</span>: &#123;</div><div class="line">    <span class="attr">"fileVersion"</span>: <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在模块后端添加Api路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">method</span>: <span class="string">'post'</span>, <span class="attr">path</span>: <span class="string">'version/update'</span>, <span class="attr">controller</span>: version &#125;</div></pre></td></tr></table></figure></p><p>添加version Controller<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">VersionController</span> <span class="keyword">extends</span> <span class="title">app</span>.<span class="title">Controller</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">async</span> update() &#123;</div><div class="line">      <span class="keyword">await</span> <span class="keyword">this</span>.service.version.update(<span class="keyword">this</span>.ctx.getInt(<span class="string">'version'</span>));</div><div class="line">      <span class="keyword">this</span>.ctx.success();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> VersionController;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>添加version Service<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Version</span> <span class="keyword">extends</span> <span class="title">app</span>.<span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">async</span> update(version) &#123;</div><div class="line">      <span class="keyword">if</span> (version === <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Version;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><blockquote><p>当启动后端服务时，EggBorn.js自动检测模块数据版本的变化，并执行相应的路由，完成数据的版本升级。</p></blockquote><h3 id="模块发布"><a href="#模块发布" class="headerlink" title="模块发布"></a>模块发布</h3><p>当项目中的模块代码稳定后，可以将模块公开发布，贡献到开源社区。也可以在公司内部建立npm私有仓库，然后把模块发布到私有仓库，形成公司资产，便于重复使用。<br>模块发布步骤如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> path/to/module      -- 进入模块目录</div><div class="line">$ npm install            -- 安装模块依赖</div><div class="line">$ npm run build:front    -- 构建前端代码</div><div class="line">$ npm run build:backend  -- 构建后端代码</div><div class="line">$ npm publish            -- 发布至npm仓库</div></pre></td></tr></table></figure></p><h2 id="测试驱动"><a href="#测试驱动" class="headerlink" title="测试驱动"></a>测试驱动</h2><p>目前只支持后端测试驱动</p><h3 id="后端Controller测试"><a href="#后端Controller测试" class="headerlink" title="后端Controller测试"></a>后端Controller测试</h3><p>在<code>backend/test/controller</code>目录添加Controller测试文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// controller/home.test.js</span></div><div class="line"><span class="keyword">const</span> &#123; app, mockUrl, assert &#125; = <span class="built_in">require</span>(<span class="string">'egg-born-mock'</span>)(__dirname);</div><div class="line"></div><div class="line">describe(<span class="string">'test/controller/home.test.js'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">  it(<span class="string">'action:index'</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> app.httpRequest().get(mockUrl(<span class="string">'home/index'</span>));</div><div class="line">    assert(result.body.code === <span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="后端Service测试"><a href="#后端Service测试" class="headerlink" title="后端Service测试"></a>后端Service测试</h3><p>在<code>backend/test/service</code>目录添加Service测试文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// service/home.test.js</span></div><div class="line"><span class="keyword">const</span> &#123; app, mockUrl, assert &#125; = <span class="built_in">require</span>(<span class="string">'egg-born-mock'</span>)(__dirname);</div><div class="line"></div><div class="line">describe(<span class="string">'test/service/home.test.js'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">  it(<span class="string">'index'</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> ctx = app.mockContext(&#123; <span class="attr">mockUrl</span>: mockUrl() &#125;);</div><div class="line">    <span class="keyword">const</span> message = <span class="keyword">await</span> ctx.service.home.index();</div><div class="line">    assert(message);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>在项目根目录执行测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm run <span class="built_in">test</span>:backend</div><div class="line">$ npm run cov:backend</div></pre></td></tr></table></figure></p><h2 id="前端架构配置"><a href="#前端架构配置" class="headerlink" title="前端架构配置"></a>前端架构配置</h2><h3 id="前端启动文件"><a href="#前端启动文件" class="headerlink" title="前端启动文件"></a>前端启动文件</h3><p>前端架构提供两种方案</p><blockquote><ol><li>Vue.js + Framework7</li><li>Vue.js + Vue Router</li></ol></blockquote><p>Framework7是移动开发专属UI界面库，内置路由机制。<br>Vue Router是Vue.js官方路由库，使用Vue Router可搭配其他各种UI界面库。</p><p>在<code>src/front/main.js</code>文件中进行切换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// choose one</span></div><div class="line"></div><div class="line"><span class="comment">//   framework7</span></div><div class="line"><span class="keyword">import</span> main <span class="keyword">from</span> <span class="string">'./framework7/main.js'</span>;</div><div class="line"></div><div class="line"><span class="comment">//   vuerouter</span></div><div class="line"><span class="comment">// import main from './vuerouter/main.js';</span></div><div class="line"></div><div class="line"><span class="comment">// export</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> main;</div></pre></td></tr></table></figure></p><h3 id="前端参数配置-1"><a href="#前端参数配置-1" class="headerlink" title="前端参数配置"></a>前端参数配置</h3><p><code>src/front/config/config.js</code>文件中的参数配置可以覆盖模块的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">  modules: &#123;</div><div class="line">    <span class="string">'aa-hello'</span>: &#123;</div><div class="line">      mode: <span class="number">2</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="前端国际化-1"><a href="#前端国际化-1" class="headerlink" title="前端国际化"></a>前端国际化</h3><p>在<code>src/front/config/locale</code>目录添加国际化文件，可以覆盖模块的国际化语言<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  mode: <span class="string">'模式'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="后端架构配置"><a href="#后端架构配置" class="headerlink" title="后端架构配置"></a>后端架构配置</h2><h3 id="后端架构"><a href="#后端架构" class="headerlink" title="后端架构"></a>后端架构</h3><p>后端架构基于Egg.js，完整支持Egg.js提供的所有功能与特性</p><blockquote><p>更多信息，请参阅: <a href="https://eggjs.org/" target="_blank" rel="external">Egg.js</a></p></blockquote><h3 id="后端参数配置-1"><a href="#后端参数配置-1" class="headerlink" title="后端参数配置"></a>后端参数配置</h3><p><code>src/backend/config/config.default.js</code>文件中的参数配置可以覆盖模块的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> config = &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="comment">// module config</span></div><div class="line">  config.modules = &#123;</div><div class="line">    <span class="string">'aa-hello'</span>: &#123;</div><div class="line">      mode: <span class="number">2</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="后端国际化-1"><a href="#后端国际化-1" class="headerlink" title="后端国际化"></a>后端国际化</h3><p>在<code>src/backend/config/locale</code>目录添加国际化文件，可以覆盖模块的国际化语言<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  mode: <span class="string">'模式'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="构建前端代码"><a href="#构建前端代码" class="headerlink" title="构建前端代码"></a>构建前端代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run build:front</div></pre></td></tr></table></figure><h3 id="启动后端服务"><a href="#启动后端服务" class="headerlink" title="启动后端服务"></a>启动后端服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run start:backend</div></pre></td></tr></table></figure><h3 id="停止后端服务"><a href="#停止后端服务" class="headerlink" title="停止后端服务"></a>停止后端服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run stop:backend</div></pre></td></tr></table></figure><h3 id="后端服务启动参数配置"><a href="#后端服务启动参数配置" class="headerlink" title="后端服务启动参数配置"></a>后端服务启动参数配置</h3><p>编辑<code>build/config.js</code>文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// backend</span></div><div class="line"><span class="keyword">const</span> backend = &#123;</div><div class="line">  port: <span class="number">7002</span>,</div><div class="line">  hostname: <span class="string">'127.0.0.1'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>强烈建议使用nginx托管前端静态资源，并反向代理后端服务，配置如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen <span class="number">80</span>;</div><div class="line">  server_name example.com www.example.com;</div><div class="line">  set $node_port <span class="number">7002</span>;</div><div class="line"></div><div class="line">  root /path/to/www;</div><div class="line"></div><div class="line">  location  /api/ &#123;</div><div class="line">    proxy_http_version <span class="number">1.1</span>;</div><div class="line">    proxy_set_header X-Real-IP $remote_addr;</div><div class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">    proxy_set_header Host $http_host;</div><div class="line">    proxy_set_header X-NginX-<span class="built_in">Proxy</span> <span class="literal">true</span>;</div><div class="line">    proxy_set_header Upgrade $http_upgrade;</div><div class="line">    proxy_set_header Connection <span class="string">"upgrade"</span>;</div><div class="line">    proxy_pass http:<span class="comment">//127.0.0.1:$node_port$request_uri;</span></div><div class="line">    proxy_redirect off;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="GitHub贡献"><a href="#GitHub贡献" class="headerlink" title="GitHub贡献"></a>GitHub贡献</h2><blockquote><p>有任何疑问，欢迎提交 <a href="https://github.com/zhennann/egg-born/issues" target="_blank" rel="external">issue</a>， 或者直接修改提交 <a href="https://github.com/zhennann/egg-born/pulls" target="_blank" rel="external">PR</a>！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;EggBorn-js是什么&quot;&gt;&lt;a href=&quot;#EggBorn-js是什么&quot; class=&quot;headerlink&quot; title=&quot;EggBorn.js是什么&quot;&gt;&lt;/a&gt;EggBorn.js是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;EggBorn.js是一款
      
    
    </summary>
    
      <category term="docs" scheme="http://egg-born.org/zh-cn/categories/docs/"/>
    
    
  </entry>
  
</feed>
