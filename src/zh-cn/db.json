{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/EggBornJS.png","path":"images/EggBornJS.png","modified":1,"renderable":0},{"_id":"source/images/privatemodule.png","path":"images/privatemodule.png","modified":1,"renderable":0},{"_id":"source/images/publicmodule.png","path":"images/publicmodule.png","modified":1,"renderable":0},{"_id":"source/images/structure.png","path":"images/structure.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b2314c6062eca1fe9ed41822c8b6691efe69b4ec","modified":1508256215000},{"_id":"themes/indigo/.DS_Store","hash":"5cffc2a4f589bb65ea3b67ecd8e84ba79b22a7cb","modified":1508347223000},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1508235283000},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1508235283000},{"_id":"themes/indigo/README.md","hash":"b188fb95a9c16eb188eeffa6caa0895a14676338","modified":1508235283000},{"_id":"themes/indigo/_config.yml","hash":"46566b34a19dd9afc0cda6c26f545009859615a0","modified":1508610315000},{"_id":"themes/indigo/package.json","hash":"64359a70dd3c185f7d3e661cc85d66c457da0269","modified":1508235283000},{"_id":"source/_data/languages.yml","hash":"443a752bb91b932608243ab220368537acc91395","modified":1508235283000},{"_id":"source/_posts/tutorial.md","hash":"1c41c87d3bdeec3005b0fc4ceb0d264c9c0e8be3","modified":1508608638000},{"_id":"source/images/EggBornJS.png","hash":"6346c536b4f77420313eb9a3f7e4b99d9f881999","modified":1508253971000},{"_id":"source/images/privatemodule.png","hash":"de2a953cf7fdfdda1e89d220dd2dfb3d7fef9879","modified":1508256514000},{"_id":"source/images/publicmodule.png","hash":"13d076092559dd5e4bef3b119fa09d5c42937960","modified":1508257351000},{"_id":"source/images/structure.png","hash":"9be92233fe23932c67630404bf2b01bcf397a3b0","modified":1508256175000},{"_id":"themes/indigo/languages/en.yml","hash":"3f37329c22cfdab871678a29c6ce85ed5c07e63f","modified":1508255343000},{"_id":"themes/indigo/languages/zh-cn.yml","hash":"19989879a44d6a21132cbe226f548d11657f261d","modified":1508255356000},{"_id":"themes/indigo/languages/zh-tw.yml","hash":"55c126ef1f7cf742d5301d98ffa2be23a6e98e90","modified":1508255445000},{"_id":"themes/indigo/layout/.DS_Store","hash":"158c68b54cc6d5287e914034c1e06c00237da943","modified":1508347197000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1508235283000},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1508235283000},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1508235283000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1508235283000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1508235283000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1508235283000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1508235283000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1508235283000},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1508235283000},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1508235283000},{"_id":"themes/indigo/source/.DS_Store","hash":"d1a7e04c60face386421c5cd5fcd40705937b41c","modified":1508347229000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"1319871aa7f435859e6a57e027c3d565920c4ea3","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"b197b87b120b09b68aa3d79954ed039816a88664","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"fa6e3b4c5e5a59a0a61c4521b686f6343190cbd7","modified":1508346643000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"e7f3e5bfb8d057f7c057e4da2cb02e5e8e44cbd7","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1508235283000},{"_id":"themes/indigo/source/css/.DS_Store","hash":"12494a5f3ac482827bbd7c13bde6441550de3da8","modified":1508347236000},{"_id":"themes/indigo/source/css/style.less","hash":"3e151cd162e8af87d7ca90e3067f7bd99a25f823","modified":1508235283000},{"_id":"themes/indigo/source/img/_avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1508235283000},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1508235283000},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"ea4a4dc476dce0ec978df7721f2992bd05277727","modified":1508235283000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1508235283000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1508235283000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1508235283000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1508235283000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1508235283000},{"_id":"themes/indigo/source/js/main.js","hash":"e0c6079e59ed7fd75e8c24226fbc0cd96cb5a49c","modified":1508342312000},{"_id":"themes/indigo/source/js/main.min.js","hash":"b89bf9086aef46c29fd881703ce5fd7b9929dd29","modified":1508235283000},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1508235283000},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"11669a86776bd0ba4052f4cfd7dcdf0b3c58f30d","modified":1508610733000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"d263085819e08310491db0be040d077cb928c4b1","modified":1508608646000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"84efee0ef2fbf4e222456ab6ab8b5141287537e6","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"968b27ca952d01b066cfe49fb670faf177d6b67e","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1508235283000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"6ff978efe73516c6594a4fc21c586d56ec1c271b","modified":1508255323000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"4ea7ef6dc47a3df8d31bac4bdf83c17d4161f593","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"c0a95b527dc09e40c05f0e7b7f207d1cb0b779ae","modified":1508347027000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"19308ed333f5b7da00251b01adf40122137819a7","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1508235283000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508235283000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1508235283000},{"_id":"public/atom.xml","hash":"0db1b3e591ff852330c44251f830896a5fb14bb3","modified":1508610775292},{"_id":"public/content.json","hash":"9734bce1a7adea6e4603a68fbcf2846361041e24","modified":1508610775489},{"_id":"public/archives/index.html","hash":"33f1b2e0f6ecdbbe0ff510a19db5d4a00a39eb2f","modified":1508610775499},{"_id":"public/archives/2017/index.html","hash":"a5a715cb77e938d55d999e4ba996e7f70fa23709","modified":1508610775499},{"_id":"public/archives/2017/10/index.html","hash":"5452f396c8ef00e6f5303019b499798e36ed89ac","modified":1508610775499},{"_id":"public/categories/docs/index.html","hash":"86dc0457ff05ec653fb74e6098ef50d9acec270f","modified":1508610775499},{"_id":"public/index.html","hash":"2a9681ecb9e66282dc02f8a4b590dc0f137864ab","modified":1508610775499},{"_id":"public/docs/tutorial/index.html","hash":"51f8c6d93c922c32111895fddf75f791c6ced664","modified":1508610775499},{"_id":"public/images/EggBornJS.png","hash":"6346c536b4f77420313eb9a3f7e4b99d9f881999","modified":1508610775506},{"_id":"public/images/privatemodule.png","hash":"de2a953cf7fdfdda1e89d220dd2dfb3d7fef9879","modified":1508610775506},{"_id":"public/images/publicmodule.png","hash":"13d076092559dd5e4bef3b119fa09d5c42937960","modified":1508610775507},{"_id":"public/images/structure.png","hash":"9be92233fe23932c67630404bf2b01bcf397a3b0","modified":1508610775507},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1508610775507},{"_id":"public/img/avatar.jpg","hash":"ea4a4dc476dce0ec978df7721f2992bd05277727","modified":1508610775507},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1508610775507},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1508610775507},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1508610775507},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1508610775507},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1508610775507},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1508610775508},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1508610775509},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1508610775509},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1508610775509},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1508610775509},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1508610775509},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1508610775509},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1508610775509},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508610775540},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508610775541},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1508610775541},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1508610775542},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1508610775542},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1508610775542},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1508610775543},{"_id":"public/js/main.min.js","hash":"b89bf9086aef46c29fd881703ce5fd7b9929dd29","modified":1508610775547},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1508610775548},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1508610775548},{"_id":"public/js/main.js","hash":"e0c6079e59ed7fd75e8c24226fbc0cd96cb5a49c","modified":1508610775548},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508610775548},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508610775548},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508610775548},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1508610775566},{"_id":"public/css/style.css","hash":"f15d79c71ed21d13be15d510b3b0477db250b74f","modified":1508610776055}],"Category":[{"name":"docs","_id":"cj91nwjp00001ekudzz9txzjo"}],"Data":[{"_id":"languages","data":{"zh-cn":"简体中文","en":"English"}}],"Page":[],"Post":[{"title":"EggBorn.js开发指南","caption":"tutorial","date":"2017-10-17T10:18:14.000Z","_content":"\n## EggBorn.js是什么\n> EggBorn.js是一款顶级Javascript全栈开发框架。\n\nEggBorn.js是采用Javascript进行全栈开发的最佳实践。\nEggBorn.js不重复造轮子，而是采用业界最新的开源技术，进行全栈开发的最佳组合。\nEggBorn.js前端采用Vue.js + Framework7 / Vue Router + Webpack，后端采用Koa.js + Egg.js，数据库采用mysql。\nEggBorn.js时刻跟踪开源技术的最新成果，并持续优化，使整个框架时刻保持最佳状态。\n\n## EggBorn.js重点解决什么问题：业务模块化\nJavascript技术的蓬勃发展，为前后端开发带来了更顺畅的体验，显著提升了开发效率。但仍有网友质疑Javascript能否胜任大型Web应用的开发。大型Web应用的特点是随着业务的增长，需要开发大量的页面组件。面对这种场景，一般有两种解决方案：\n\n> 1 采用单页面的构建方式，缺点是产生的部署包很大。\n> 2 采用页面异步加载方式，缺点是页面过于零散，需要频繁与后端交互。\n\nEggBorn.js实现了第三种解决方案：\n> 3 页面组件按业务需求归类，进行模块化，并且实现了模块的异步加载机制，从而弥合了前两种解决方案的缺点，完美满足大型Web应用业务持续增长的需求。\n\n## EggBorn.js的技术特点\n- 业务模块化：页面组件按模块组织\n- 加载方式灵活：模块既可异步加载，也可同步加载\n- 模块高度内聚：模块包括前端页面组件和后端业务逻辑\n- 参数配置灵活：模块中的前后端可以单独进行参数配置\n- 国际化：模块中的前后端均支持独立的国际化\n- 模块隔离：模块的页面、数据、逻辑、路由、配置等元素均进行了命名空间隔离处理，避免模块之间的变量污染与冲突\n- 超级易用的事务处理：只需在路由记录上配置一个参数，即可完美实现数据库的事务处理。\n- 渐进式开发：由于模块的高度内聚，可以将业务以模块的形式沉淀，在多个项目中重复使用，既可贡献到npm开源社区，也可部署到公司内部私有npm仓库。\n\n> 有了EggBorn.js，从此可复用的不仅仅是组件，还有业务模块。\n\n## 快速上手\n\n### 安装EggBorn.js脚手架\n\n``` bash\n$ npm i -g egg-born\n```\n\n### 新建项目\n\n``` bash\n$ egg-born project_name\n```\n\n> EggBorn.js目前提供了2个项目脚手架，分别是\n> - `front-backend-mysql`  -- 前后端全栈项目模板\n> - `front`                -- 前端项目模板，后端可采用其他方案\n\n### 配置mysql连接参数\n\n如果采用了“front-backend-mysql”模板，请配置mysql连接参数（空数据库即可）\n\n编辑`src/backend/config/config.default.js`文件\n``` javascript\n  // mysql\n  config.mysql = {\n    clients: {\n      // donot change the name  \n      __ebdb: {\n        host: '127.0.0.1',\n        port: '3306',\n        user: 'travis',\n        password: '',\n        database: 'egg-born',\n      },\n    },\n  };\n```\n\n### 运行项目\n\n``` bash\n$ cd path/to/project\n$ npm i\n$ npm run dev:backend  -- 启动后端服务\n$ npm run dev:front    -- 启动前端服务\n```\n\n## EggBorn.js架构图\n\n### 系统架构\n![](/zh-cn/images/EggBornJS.png)\n\n### 项目文件结构\n![](/zh-cn/images/structure.png)\n\n### 模块文件结构\n![](/zh-cn/images/privatemodule.png)\n![](/zh-cn/images/publicmodule.png)\n\n## 前端开发\n\n### 启动文件\n前端架构提供两种方案\n\n> 1. Vue.js + Framework7\n> 2. Vue.js + Vue Router\n\nFramework7是移动开发专属UI界面库，内置路由机制。\nVue Router是Vue.js官方路由库，使用Vue Router可搭配其他各种UI界面库。\n\n在`src/front/main.js`文件中进行切换\n``` javascript\n// choose one\n\n//   framework7\nimport main from './framework7/main.js';\n\n//   vuerouter\n// import main from './vuerouter/main.js';\n\n// export\nexport default main;\n```\n\n### 配置文件\n`src/front/config/config.js`文件中的参数配置可以覆盖模块的参数\n``` javascript\nexport default{\n  module: {\n    'aa-hello': {\n      mode: 2,\n    },\n  },\n};\n```\n\n### 国际化\n在`src/front/config/locale`目录添加国际化文件，可以覆盖模块的国际化语言\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nexport default {\n  mode: '模式',\n};\n```\n\n## 后端开发\n\n### 后端架构\n后端架构基于Egg.js，完整支持Egg.js提供的所有功能与特性\n> 更多信息，请参阅: [Egg.js](https://eggjs.org/)\n\n### 配置文件\n`src/backend/config/config.default.js`文件中的参数配置可以覆盖模块的参数\n``` javascript\nmodule.exports = appInfo => {\n  const config = {};\n\n  // module config\n  config.module = {\n    'aa-hello': {\n      mode: 2,\n    },\n  };\n\n  return config;\n};\n```\n\n### 国际化\n在`src/backend/config/locale`目录添加国际化文件，可以覆盖模块的国际化语言\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nexport default {\n  mode: '模式',\n};\n```\n\n## 模块开发\n\n### 命名约定\n为了不断沉淀业务模块，达到高度可复用的效果，所有模块的命名空间必须充分隔离，避免相互污染与冲突，故采用如下命名方式：\n> egg-born-module-{providerId}-{moduleName}\n\n如模块`egg-born-module-a-version`，各环节命名信息如下：\n> - `providerId`: a\n> - `moduleName`: version\n> - `fullName`: egg-born-module-a-version\n> - `relativeName`: a-version\n> - 前端页面路由地址: /a/version/{page}\n> - 后端API路由地址：/a/version/{controller}/{action}\n\n### 加载机制\n模块既支持异步加载，也支持同步加载。默认是异步加载，如果要同步加载，只需在模块名称后面加上`-sync`后缀，如模块`egg-born-module-aa-login-sync`。\n\n### 新建模块\n进入`src/module`目录执行脚手架，创建模块文件骨架\n``` bash\n$ egg-born module_relative_name\n```\n\n> EggBorn.js目前提供了2个模块脚手架，分别是\n> - `module`               -- 全栈模块模板\n> - `module-front`         -- 前端模块模板\n\n### 模块前端开发\n\n#### 前端页面路由\n在`front/src/routes.js`中添加页面路由，如\n``` javascript\nfunction load(name) {\n  return require(`./pages/${name}.vue`).default;\n}\n\nexport default [\n  { path: 'welcome/:who', component: load('welcome') },\n  { path: 'profile', component: load('profile'), meta: { requiresAuth: true } },\n  { path: '/login', component: load('login') },\n];\n```\n\n> - `path`: 路径，支持参数。以`/`开头，代表根页面组件。`login`页面组件通常这样配置\n> - `component`: 页面组件对象\n> - `meta`: 路由元数据\n> - `meta.requiresAuth`: 如果页面组件需要登录，须设为`true`\n\n在页面中引用页面组件，请使用绝对路径，如\n``` html\n<f7-list-item link=\"/aa/hello/welcome/You\" title=\"Welcome\"></f7-list-item>\n<f7-list-item link=\"/aa/hello/profile\" title=\"Profile\"></f7-list-item>\n```\n\n#### 前端状态管理\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。EggBorn.js采用Vuex实现了完全隔离的模块状态管理机制。\n在`front/src/store.js`中添加状态，如\n``` javascript\nexport default function(Vue) {\n\n  return {\n    state: {\n      message: 'hello world',\n    },\n  };\n\n}\n```\n\n在页面组件中访问本模块状态\n``` javascript\nconst message = this.$local.state.message;\n```\n\n在页面组件中访问其他模块状态\n``` javascript\nconst message = this.$store.state[providerId][moduleName].message;\n```\n\n> 更多信息，请参阅: [Vuex](https://vuex.vuejs.org/)\n\n#### 前端参数配置\n在`front/src/config/config.js`中添加配置信息，如\n``` javascript\nexport default {\n  mode: 1,\n};\n```\n\n只支持在页面组件中访问本模块内部的参数配置\n``` javascript\nconst mode = this.$config.mode;\n```\n\n#### 前端国际化\n在`front/src/config/locale`目录添加国际化文件\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nexport default {\n  mode: '模式',\n  \"Hello world! I'm %s.\": '您好，世界！我是%s。',  \n};\n```\n\n国际化语言采取全局合并的方式，有利于语言资源的共享，在页面组件中访问方式如下\n``` javascript\nconst mode = this.$text('mode');\nconst message = this.$text(\"Hello world! I'm %s.\",'zhennann');\n```\n\n### 模块后端开发\n\n#### 后端api路由\n在`backend/src/routes.js`中添加页面路由，如\n``` javascript\nconst home = require('./controller/home.js');\n\nmodule.exports = [\n  { method: 'get', path: 'home/index', controller: home, action: 'index', transaction: true },\n];\n```\n\n> - `method`: get/post等方法\n> - `path`: 路径，支持参数\n> - `component`: Controller对象\n> - `action`: Controller方法，如果不设置，则自动采用path尾部单词\n> - `transaction`: 默认为false，如果设为true，则启用数据库事务\n\n在前端页面组件中访问本模块api路由\n``` javascript\nthis.$api.get('home/index').then(data => {\n}).catch(err => {\n});\n```\n\n在前端页面组件中访问其他模块api路由\n``` javascript\nthis.$api.get('/providerId/moduleName/home/index').then(data => {\n}).catch(err => {\n});\n```\n\n#### 后端Controller\n后端Controller的实现方式与Egg.js保持一致\n``` javascript\nmodule.exports = app => {\n  class HomeController extends app.Controller {\n\n    async index() {\n      const message = await this.service.home.index();\n      this.ctx.success(message);\n    }\n\n  }\n  return HomeController;\n};\n```\n\n> 更多信息，请参阅: [Egg.js Controller](https://eggjs.org/zh-cn/basics/controller.html)\n\n#### 后端Service\nService用于封装业务逻辑，供Controller调用，实现方式与Egg.js保持一致。\n``` javascript\nmodule.exports = app => {\n  class Home extends app.Service {\n\n    async index() {\n      const res = await this.ctx.db.queryOne('show tables');\n      return res;\n    }\n\n  }\n\n  return Home;\n};\n```\n\n> 与Egg.js不同之处在于，Service使用ctx.db操作数据库，从而自动支持数据库事务。\n\n> 更多信息，请参阅: [Egg.js Service](https://eggjs.org/zh-cn/basics/service.html)\n\n#### 后端Controller调用\n为了支持大型Web系统的开发，EggBorn.js支持模块后端Controller之间的调用，如\n``` javascript\nconst message = await this.ctx.performAction({\n  method: 'get',\n  url: 'home/index',\n  query: {\n    username: 'kevin',\n  },\n  params: {\n    mode: 1,\n  },\n  body: {\n    content: 'ready',\n  },\n});\n```\n\n> - `method`: get/post等方法\n> - `url`: 访问本模块的Controller使用相对路径，访问其他模块的Controller使用以`/`开头的绝对路径。\n> - `query`、`params`、`body`: 与常规的Controller参数保持一致\n\n#### 后端数据库操作\n后端数据库操作与Egg.js保持一致\n> 更多信息，请参阅: [Egg.js MySQL](https://eggjs.org/zh-cn/tutorials/mysql.html)\n\n#### 后端数据库事务\nEggBorn.js提供了更为便利的数据库事务实现方式，只需在后端api路由记录中配置transaction参数，Service使用ctx.db操作数据库。\n如果是主Controller通过ctx.performAction调用子Controller，数据库事务开启规则如下：\n\n| 主Controller配置 | 子Controller配置 | 子Controller实际启用 |\n|:----------------|:----------------|:-------------------- |\n| true            | true            | true                 |\n| true            | false           | true                 |\n| false           | true            | true                 |\n| false           | false           | false                |\n\n#### 后端参数配置\n在`backend/src/config/config.js`中添加配置信息，如\n``` javascript\nmodule.exports = appInfo => {\n  const config = {};\n\n  config.message = \"Hello world! I'm %s.\";\n\n  return config;\n};\n```\n\n访问本模块内部的参数配置示例如下\n``` javascript\nconst message = this.ctx.config.message;\n```\n\n#### 后端国际化\n在`backend/src/config/locale`目录添加国际化文件\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nmodule.exports = {\n  \"Hello world! I'm %s.\": '您好，世界！我是%s。',\n  'not found': '未发现',\n};\n```\n\n国际化语言采取全局合并的方式，有利于语言资源的共享，访问方式如下\n``` javascript\nconst notFound = this.ctx.text('not found');\nconst message = this.ctx.text(\"Hello world! I'm %s.\", 'zhennann');\n```\n\n#### 后端错误处理\n在`backend/src/config/errors.js`文件中添加错误代码\n``` javascript\n// error code should start from 1001\nmodule.exports = {\n  1001: 'not found',\n};\n```\n\n返回错误信息示例如下\n``` javascript\nthis.ctx.fail(1001);\n```\n\n也可抛出异常示例如下\n``` javascript\nthis.ctx.throw(1001);\n```\n\n## 模块管理\n\n### 模块依赖\nEggBorn.js通过package.json文件管理模块依赖关系。\n比如，模块aa-module1依赖aa-module2，需要在模块aa-module1的package.json文件中作如下配置\n``` json\n{\n  \"name\": \"egg-born-module-aa-module1\",\n  \"version\": \"0.0.1\",\n  \"eggBornModule\": {\n    \"dependencies\": {\n      \"aa-module2\": \"0.0.1\"\n    }\n  },\n  \"dependencies\": {\n    \"egg-born-module-aa-module2\": \"^0.0.1\"\n  }\n}\n```\n\n> 设置`\"egg-born-module-aa-module2\": \"^0.0.1\"`，是为了在安装模块aa-module1时自动安装模块aa-module2。如果模块没有公开发布，就不必设置。\n\n### 模块数据版本\n模块一般都要操作数据库，当模板版本升级时，数据库结构也有可能变动。EggBorn.js实现了模块数据版本的管理，便于业务模块的积累沉淀。\n\n在模块的package.json文件中配置fileVersion为当前数据版本\n``` json\n{\n  \"name\": \"egg-born-module-aa-module1\",\n  \"version\": \"0.0.1\",\n  \"eggBornModule\": {\n    \"fileVersion\": 1\n  }\n}\n```\n\n在模块后端添加Api路由\n``` javascript\n{ method: 'post', path: 'version/update', controller: version }\n```\n\n添加version Controller\n``` javascript\nmodule.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.getInt('version'));\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n```\n\n添加version Service\n``` javascript\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(version) {\n      if (version === 1) {\n        // do something\n      }\n    }\n\n  }\n\n  return Version;\n};\n```\n\n> 当启动后端服务时，EggBorn.js自动检测模块数据版本的变化，并执行相应的路由，完成数据的版本升级。\n\n### 模块发布\n当项目中的模块代码稳定后，可以将模块公开发布，贡献到开源社区。也可以在公司内部建立npm私有仓库，然后把模块发布到私有仓库，形成公司资产，便于重复使用。\n模块发布步骤如下\n``` bash\n$ cd path/to/module      -- 进入模块目录\n$ npm i                  -- 安装模块依赖\n$ npm run build:front    -- 构建前端代码\n$ npm run build:backend  -- 构建后端代码\n$ npm publish            -- 发布至npm仓库\n```\n\n## 测试驱动\n目前只支持后端测试驱动\n\n### 后端Controller测试\n在`backend/test/controller`目录添加Controller测试文件\n``` javascript\n// controller/home.test.js\nconst { app, mock, assert } = require('egg-mock/bootstrap');\nconst parseMockUrl = function(url) {\n  const prefix = app.mockUtil.parseUrlFromPackage(__dirname);\n  return `${prefix}${url}`;\n};\n\ndescribe('test/controller/home.test.js', () => {\n\n  it('action:index', async () => {\n    const result = await app.httpRequest().get(parseMockUrl('home/index'));\n    assert(result.body.code === 0);\n  });\n\n});\n```\n\n### 后端Service测试\n在`backend/test/service`目录添加Service测试文件\n``` javascript\n// service/home.test.js\nconst { app, mock, assert } = require('egg-mock/bootstrap');\nconst parseMockUrl = function() {\n  return app.mockUtil.parseUrlFromPackage(__dirname);\n};\n\ndescribe('test/service/home.test.js', () => {\n\n  it('index', async () => {\n    const ctx = app.mockContext({ mockUrl: parseMockUrl() });\n    const message = await ctx.service.home.index();\n    assert(message);\n  });\n\n});\n```\n\n### 执行测试\n在项目根目录执行测试\n``` bash\n$ npm run test:backend\n$ npm run cov:backend\n```\n\n## 部署\n\n### 构建前端代码\n``` bash\n$ npm run build:front\n```\n\n### 启动后端服务\n``` bash\n$ npm run start:backend\n```\n\n### 停止后端服务\n``` bash\n$ npm run stop:backend\n```\n\n### 后端服务启动参数配置\n编辑`build/config.js`文件\n``` javascript\n// backend\nconst backend = {\n  port: 7002,\n  hostname: '127.0.0.1',\n};\n```\n\n### nginx配置\n强烈建议使用nginx托管前端静态资源，并反向代理后端服务，配置如下\n``` javascript\nserver {\n  listen 80;\n  server_name example.com www.example.com;\n  set $node_port 7002;\n\n  root /path/to/www;\n\n  location  /api/ {\n    proxy_http_version 1.1;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-NginX-Proxy true;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_pass http://127.0.0.1:$node_port$request_uri;\n    proxy_redirect off;\n  }\n\n}\n```\n\n## GitHub贡献\n> 有任何疑问，欢迎提交 [issue](https://github.com/zhennann/egg-born/issues)， 或者直接修改提交 [PR](https://github.com/zhennann/egg-born/pulls)！\n\n\n\n","source":"_posts/tutorial.md","raw":"---\ntitle: EggBorn.js开发指南\ncaption: tutorial\ndate: 2017-10-17 18:18:14\ncategory: docs\n---\n\n## EggBorn.js是什么\n> EggBorn.js是一款顶级Javascript全栈开发框架。\n\nEggBorn.js是采用Javascript进行全栈开发的最佳实践。\nEggBorn.js不重复造轮子，而是采用业界最新的开源技术，进行全栈开发的最佳组合。\nEggBorn.js前端采用Vue.js + Framework7 / Vue Router + Webpack，后端采用Koa.js + Egg.js，数据库采用mysql。\nEggBorn.js时刻跟踪开源技术的最新成果，并持续优化，使整个框架时刻保持最佳状态。\n\n## EggBorn.js重点解决什么问题：业务模块化\nJavascript技术的蓬勃发展，为前后端开发带来了更顺畅的体验，显著提升了开发效率。但仍有网友质疑Javascript能否胜任大型Web应用的开发。大型Web应用的特点是随着业务的增长，需要开发大量的页面组件。面对这种场景，一般有两种解决方案：\n\n> 1 采用单页面的构建方式，缺点是产生的部署包很大。\n> 2 采用页面异步加载方式，缺点是页面过于零散，需要频繁与后端交互。\n\nEggBorn.js实现了第三种解决方案：\n> 3 页面组件按业务需求归类，进行模块化，并且实现了模块的异步加载机制，从而弥合了前两种解决方案的缺点，完美满足大型Web应用业务持续增长的需求。\n\n## EggBorn.js的技术特点\n- 业务模块化：页面组件按模块组织\n- 加载方式灵活：模块既可异步加载，也可同步加载\n- 模块高度内聚：模块包括前端页面组件和后端业务逻辑\n- 参数配置灵活：模块中的前后端可以单独进行参数配置\n- 国际化：模块中的前后端均支持独立的国际化\n- 模块隔离：模块的页面、数据、逻辑、路由、配置等元素均进行了命名空间隔离处理，避免模块之间的变量污染与冲突\n- 超级易用的事务处理：只需在路由记录上配置一个参数，即可完美实现数据库的事务处理。\n- 渐进式开发：由于模块的高度内聚，可以将业务以模块的形式沉淀，在多个项目中重复使用，既可贡献到npm开源社区，也可部署到公司内部私有npm仓库。\n\n> 有了EggBorn.js，从此可复用的不仅仅是组件，还有业务模块。\n\n## 快速上手\n\n### 安装EggBorn.js脚手架\n\n``` bash\n$ npm i -g egg-born\n```\n\n### 新建项目\n\n``` bash\n$ egg-born project_name\n```\n\n> EggBorn.js目前提供了2个项目脚手架，分别是\n> - `front-backend-mysql`  -- 前后端全栈项目模板\n> - `front`                -- 前端项目模板，后端可采用其他方案\n\n### 配置mysql连接参数\n\n如果采用了“front-backend-mysql”模板，请配置mysql连接参数（空数据库即可）\n\n编辑`src/backend/config/config.default.js`文件\n``` javascript\n  // mysql\n  config.mysql = {\n    clients: {\n      // donot change the name  \n      __ebdb: {\n        host: '127.0.0.1',\n        port: '3306',\n        user: 'travis',\n        password: '',\n        database: 'egg-born',\n      },\n    },\n  };\n```\n\n### 运行项目\n\n``` bash\n$ cd path/to/project\n$ npm i\n$ npm run dev:backend  -- 启动后端服务\n$ npm run dev:front    -- 启动前端服务\n```\n\n## EggBorn.js架构图\n\n### 系统架构\n![](/zh-cn/images/EggBornJS.png)\n\n### 项目文件结构\n![](/zh-cn/images/structure.png)\n\n### 模块文件结构\n![](/zh-cn/images/privatemodule.png)\n![](/zh-cn/images/publicmodule.png)\n\n## 前端开发\n\n### 启动文件\n前端架构提供两种方案\n\n> 1. Vue.js + Framework7\n> 2. Vue.js + Vue Router\n\nFramework7是移动开发专属UI界面库，内置路由机制。\nVue Router是Vue.js官方路由库，使用Vue Router可搭配其他各种UI界面库。\n\n在`src/front/main.js`文件中进行切换\n``` javascript\n// choose one\n\n//   framework7\nimport main from './framework7/main.js';\n\n//   vuerouter\n// import main from './vuerouter/main.js';\n\n// export\nexport default main;\n```\n\n### 配置文件\n`src/front/config/config.js`文件中的参数配置可以覆盖模块的参数\n``` javascript\nexport default{\n  module: {\n    'aa-hello': {\n      mode: 2,\n    },\n  },\n};\n```\n\n### 国际化\n在`src/front/config/locale`目录添加国际化文件，可以覆盖模块的国际化语言\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nexport default {\n  mode: '模式',\n};\n```\n\n## 后端开发\n\n### 后端架构\n后端架构基于Egg.js，完整支持Egg.js提供的所有功能与特性\n> 更多信息，请参阅: [Egg.js](https://eggjs.org/)\n\n### 配置文件\n`src/backend/config/config.default.js`文件中的参数配置可以覆盖模块的参数\n``` javascript\nmodule.exports = appInfo => {\n  const config = {};\n\n  // module config\n  config.module = {\n    'aa-hello': {\n      mode: 2,\n    },\n  };\n\n  return config;\n};\n```\n\n### 国际化\n在`src/backend/config/locale`目录添加国际化文件，可以覆盖模块的国际化语言\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nexport default {\n  mode: '模式',\n};\n```\n\n## 模块开发\n\n### 命名约定\n为了不断沉淀业务模块，达到高度可复用的效果，所有模块的命名空间必须充分隔离，避免相互污染与冲突，故采用如下命名方式：\n> egg-born-module-{providerId}-{moduleName}\n\n如模块`egg-born-module-a-version`，各环节命名信息如下：\n> - `providerId`: a\n> - `moduleName`: version\n> - `fullName`: egg-born-module-a-version\n> - `relativeName`: a-version\n> - 前端页面路由地址: /a/version/{page}\n> - 后端API路由地址：/a/version/{controller}/{action}\n\n### 加载机制\n模块既支持异步加载，也支持同步加载。默认是异步加载，如果要同步加载，只需在模块名称后面加上`-sync`后缀，如模块`egg-born-module-aa-login-sync`。\n\n### 新建模块\n进入`src/module`目录执行脚手架，创建模块文件骨架\n``` bash\n$ egg-born module_relative_name\n```\n\n> EggBorn.js目前提供了2个模块脚手架，分别是\n> - `module`               -- 全栈模块模板\n> - `module-front`         -- 前端模块模板\n\n### 模块前端开发\n\n#### 前端页面路由\n在`front/src/routes.js`中添加页面路由，如\n``` javascript\nfunction load(name) {\n  return require(`./pages/${name}.vue`).default;\n}\n\nexport default [\n  { path: 'welcome/:who', component: load('welcome') },\n  { path: 'profile', component: load('profile'), meta: { requiresAuth: true } },\n  { path: '/login', component: load('login') },\n];\n```\n\n> - `path`: 路径，支持参数。以`/`开头，代表根页面组件。`login`页面组件通常这样配置\n> - `component`: 页面组件对象\n> - `meta`: 路由元数据\n> - `meta.requiresAuth`: 如果页面组件需要登录，须设为`true`\n\n在页面中引用页面组件，请使用绝对路径，如\n``` html\n<f7-list-item link=\"/aa/hello/welcome/You\" title=\"Welcome\"></f7-list-item>\n<f7-list-item link=\"/aa/hello/profile\" title=\"Profile\"></f7-list-item>\n```\n\n#### 前端状态管理\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。EggBorn.js采用Vuex实现了完全隔离的模块状态管理机制。\n在`front/src/store.js`中添加状态，如\n``` javascript\nexport default function(Vue) {\n\n  return {\n    state: {\n      message: 'hello world',\n    },\n  };\n\n}\n```\n\n在页面组件中访问本模块状态\n``` javascript\nconst message = this.$local.state.message;\n```\n\n在页面组件中访问其他模块状态\n``` javascript\nconst message = this.$store.state[providerId][moduleName].message;\n```\n\n> 更多信息，请参阅: [Vuex](https://vuex.vuejs.org/)\n\n#### 前端参数配置\n在`front/src/config/config.js`中添加配置信息，如\n``` javascript\nexport default {\n  mode: 1,\n};\n```\n\n只支持在页面组件中访问本模块内部的参数配置\n``` javascript\nconst mode = this.$config.mode;\n```\n\n#### 前端国际化\n在`front/src/config/locale`目录添加国际化文件\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nexport default {\n  mode: '模式',\n  \"Hello world! I'm %s.\": '您好，世界！我是%s。',  \n};\n```\n\n国际化语言采取全局合并的方式，有利于语言资源的共享，在页面组件中访问方式如下\n``` javascript\nconst mode = this.$text('mode');\nconst message = this.$text(\"Hello world! I'm %s.\",'zhennann');\n```\n\n### 模块后端开发\n\n#### 后端api路由\n在`backend/src/routes.js`中添加页面路由，如\n``` javascript\nconst home = require('./controller/home.js');\n\nmodule.exports = [\n  { method: 'get', path: 'home/index', controller: home, action: 'index', transaction: true },\n];\n```\n\n> - `method`: get/post等方法\n> - `path`: 路径，支持参数\n> - `component`: Controller对象\n> - `action`: Controller方法，如果不设置，则自动采用path尾部单词\n> - `transaction`: 默认为false，如果设为true，则启用数据库事务\n\n在前端页面组件中访问本模块api路由\n``` javascript\nthis.$api.get('home/index').then(data => {\n}).catch(err => {\n});\n```\n\n在前端页面组件中访问其他模块api路由\n``` javascript\nthis.$api.get('/providerId/moduleName/home/index').then(data => {\n}).catch(err => {\n});\n```\n\n#### 后端Controller\n后端Controller的实现方式与Egg.js保持一致\n``` javascript\nmodule.exports = app => {\n  class HomeController extends app.Controller {\n\n    async index() {\n      const message = await this.service.home.index();\n      this.ctx.success(message);\n    }\n\n  }\n  return HomeController;\n};\n```\n\n> 更多信息，请参阅: [Egg.js Controller](https://eggjs.org/zh-cn/basics/controller.html)\n\n#### 后端Service\nService用于封装业务逻辑，供Controller调用，实现方式与Egg.js保持一致。\n``` javascript\nmodule.exports = app => {\n  class Home extends app.Service {\n\n    async index() {\n      const res = await this.ctx.db.queryOne('show tables');\n      return res;\n    }\n\n  }\n\n  return Home;\n};\n```\n\n> 与Egg.js不同之处在于，Service使用ctx.db操作数据库，从而自动支持数据库事务。\n\n> 更多信息，请参阅: [Egg.js Service](https://eggjs.org/zh-cn/basics/service.html)\n\n#### 后端Controller调用\n为了支持大型Web系统的开发，EggBorn.js支持模块后端Controller之间的调用，如\n``` javascript\nconst message = await this.ctx.performAction({\n  method: 'get',\n  url: 'home/index',\n  query: {\n    username: 'kevin',\n  },\n  params: {\n    mode: 1,\n  },\n  body: {\n    content: 'ready',\n  },\n});\n```\n\n> - `method`: get/post等方法\n> - `url`: 访问本模块的Controller使用相对路径，访问其他模块的Controller使用以`/`开头的绝对路径。\n> - `query`、`params`、`body`: 与常规的Controller参数保持一致\n\n#### 后端数据库操作\n后端数据库操作与Egg.js保持一致\n> 更多信息，请参阅: [Egg.js MySQL](https://eggjs.org/zh-cn/tutorials/mysql.html)\n\n#### 后端数据库事务\nEggBorn.js提供了更为便利的数据库事务实现方式，只需在后端api路由记录中配置transaction参数，Service使用ctx.db操作数据库。\n如果是主Controller通过ctx.performAction调用子Controller，数据库事务开启规则如下：\n\n| 主Controller配置 | 子Controller配置 | 子Controller实际启用 |\n|:----------------|:----------------|:-------------------- |\n| true            | true            | true                 |\n| true            | false           | true                 |\n| false           | true            | true                 |\n| false           | false           | false                |\n\n#### 后端参数配置\n在`backend/src/config/config.js`中添加配置信息，如\n``` javascript\nmodule.exports = appInfo => {\n  const config = {};\n\n  config.message = \"Hello world! I'm %s.\";\n\n  return config;\n};\n```\n\n访问本模块内部的参数配置示例如下\n``` javascript\nconst message = this.ctx.config.message;\n```\n\n#### 后端国际化\n在`backend/src/config/locale`目录添加国际化文件\n`zh-cn.js`文件中的语言定义示例如下\n``` javascript\nmodule.exports = {\n  \"Hello world! I'm %s.\": '您好，世界！我是%s。',\n  'not found': '未发现',\n};\n```\n\n国际化语言采取全局合并的方式，有利于语言资源的共享，访问方式如下\n``` javascript\nconst notFound = this.ctx.text('not found');\nconst message = this.ctx.text(\"Hello world! I'm %s.\", 'zhennann');\n```\n\n#### 后端错误处理\n在`backend/src/config/errors.js`文件中添加错误代码\n``` javascript\n// error code should start from 1001\nmodule.exports = {\n  1001: 'not found',\n};\n```\n\n返回错误信息示例如下\n``` javascript\nthis.ctx.fail(1001);\n```\n\n也可抛出异常示例如下\n``` javascript\nthis.ctx.throw(1001);\n```\n\n## 模块管理\n\n### 模块依赖\nEggBorn.js通过package.json文件管理模块依赖关系。\n比如，模块aa-module1依赖aa-module2，需要在模块aa-module1的package.json文件中作如下配置\n``` json\n{\n  \"name\": \"egg-born-module-aa-module1\",\n  \"version\": \"0.0.1\",\n  \"eggBornModule\": {\n    \"dependencies\": {\n      \"aa-module2\": \"0.0.1\"\n    }\n  },\n  \"dependencies\": {\n    \"egg-born-module-aa-module2\": \"^0.0.1\"\n  }\n}\n```\n\n> 设置`\"egg-born-module-aa-module2\": \"^0.0.1\"`，是为了在安装模块aa-module1时自动安装模块aa-module2。如果模块没有公开发布，就不必设置。\n\n### 模块数据版本\n模块一般都要操作数据库，当模板版本升级时，数据库结构也有可能变动。EggBorn.js实现了模块数据版本的管理，便于业务模块的积累沉淀。\n\n在模块的package.json文件中配置fileVersion为当前数据版本\n``` json\n{\n  \"name\": \"egg-born-module-aa-module1\",\n  \"version\": \"0.0.1\",\n  \"eggBornModule\": {\n    \"fileVersion\": 1\n  }\n}\n```\n\n在模块后端添加Api路由\n``` javascript\n{ method: 'post', path: 'version/update', controller: version }\n```\n\n添加version Controller\n``` javascript\nmodule.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.getInt('version'));\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n```\n\n添加version Service\n``` javascript\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(version) {\n      if (version === 1) {\n        // do something\n      }\n    }\n\n  }\n\n  return Version;\n};\n```\n\n> 当启动后端服务时，EggBorn.js自动检测模块数据版本的变化，并执行相应的路由，完成数据的版本升级。\n\n### 模块发布\n当项目中的模块代码稳定后，可以将模块公开发布，贡献到开源社区。也可以在公司内部建立npm私有仓库，然后把模块发布到私有仓库，形成公司资产，便于重复使用。\n模块发布步骤如下\n``` bash\n$ cd path/to/module      -- 进入模块目录\n$ npm i                  -- 安装模块依赖\n$ npm run build:front    -- 构建前端代码\n$ npm run build:backend  -- 构建后端代码\n$ npm publish            -- 发布至npm仓库\n```\n\n## 测试驱动\n目前只支持后端测试驱动\n\n### 后端Controller测试\n在`backend/test/controller`目录添加Controller测试文件\n``` javascript\n// controller/home.test.js\nconst { app, mock, assert } = require('egg-mock/bootstrap');\nconst parseMockUrl = function(url) {\n  const prefix = app.mockUtil.parseUrlFromPackage(__dirname);\n  return `${prefix}${url}`;\n};\n\ndescribe('test/controller/home.test.js', () => {\n\n  it('action:index', async () => {\n    const result = await app.httpRequest().get(parseMockUrl('home/index'));\n    assert(result.body.code === 0);\n  });\n\n});\n```\n\n### 后端Service测试\n在`backend/test/service`目录添加Service测试文件\n``` javascript\n// service/home.test.js\nconst { app, mock, assert } = require('egg-mock/bootstrap');\nconst parseMockUrl = function() {\n  return app.mockUtil.parseUrlFromPackage(__dirname);\n};\n\ndescribe('test/service/home.test.js', () => {\n\n  it('index', async () => {\n    const ctx = app.mockContext({ mockUrl: parseMockUrl() });\n    const message = await ctx.service.home.index();\n    assert(message);\n  });\n\n});\n```\n\n### 执行测试\n在项目根目录执行测试\n``` bash\n$ npm run test:backend\n$ npm run cov:backend\n```\n\n## 部署\n\n### 构建前端代码\n``` bash\n$ npm run build:front\n```\n\n### 启动后端服务\n``` bash\n$ npm run start:backend\n```\n\n### 停止后端服务\n``` bash\n$ npm run stop:backend\n```\n\n### 后端服务启动参数配置\n编辑`build/config.js`文件\n``` javascript\n// backend\nconst backend = {\n  port: 7002,\n  hostname: '127.0.0.1',\n};\n```\n\n### nginx配置\n强烈建议使用nginx托管前端静态资源，并反向代理后端服务，配置如下\n``` javascript\nserver {\n  listen 80;\n  server_name example.com www.example.com;\n  set $node_port 7002;\n\n  root /path/to/www;\n\n  location  /api/ {\n    proxy_http_version 1.1;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-NginX-Proxy true;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_pass http://127.0.0.1:$node_port$request_uri;\n    proxy_redirect off;\n  }\n\n}\n```\n\n## GitHub贡献\n> 有任何疑问，欢迎提交 [issue](https://github.com/zhennann/egg-born/issues)， 或者直接修改提交 [PR](https://github.com/zhennann/egg-born/pulls)！\n\n\n\n","slug":"tutorial","published":1,"updated":"2017-10-21T17:57:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj91nwjos0000ekudmc0sonnl","content":"<h2 id=\"EggBorn-js是什么\"><a href=\"#EggBorn-js是什么\" class=\"headerlink\" title=\"EggBorn.js是什么\"></a>EggBorn.js是什么</h2><blockquote>\n<p>EggBorn.js是一款顶级Javascript全栈开发框架。</p>\n</blockquote>\n<p>EggBorn.js是采用Javascript进行全栈开发的最佳实践。<br>EggBorn.js不重复造轮子，而是采用业界最新的开源技术，进行全栈开发的最佳组合。<br>EggBorn.js前端采用Vue.js + Framework7 / Vue Router + Webpack，后端采用Koa.js + Egg.js，数据库采用mysql。<br>EggBorn.js时刻跟踪开源技术的最新成果，并持续优化，使整个框架时刻保持最佳状态。</p>\n<h2 id=\"EggBorn-js重点解决什么问题：业务模块化\"><a href=\"#EggBorn-js重点解决什么问题：业务模块化\" class=\"headerlink\" title=\"EggBorn.js重点解决什么问题：业务模块化\"></a>EggBorn.js重点解决什么问题：业务模块化</h2><p>Javascript技术的蓬勃发展，为前后端开发带来了更顺畅的体验，显著提升了开发效率。但仍有网友质疑Javascript能否胜任大型Web应用的开发。大型Web应用的特点是随着业务的增长，需要开发大量的页面组件。面对这种场景，一般有两种解决方案：</p>\n<blockquote>\n<p>1 采用单页面的构建方式，缺点是产生的部署包很大。<br>2 采用页面异步加载方式，缺点是页面过于零散，需要频繁与后端交互。</p>\n</blockquote>\n<p>EggBorn.js实现了第三种解决方案：</p>\n<blockquote>\n<p>3 页面组件按业务需求归类，进行模块化，并且实现了模块的异步加载机制，从而弥合了前两种解决方案的缺点，完美满足大型Web应用业务持续增长的需求。</p>\n</blockquote>\n<h2 id=\"EggBorn-js的技术特点\"><a href=\"#EggBorn-js的技术特点\" class=\"headerlink\" title=\"EggBorn.js的技术特点\"></a>EggBorn.js的技术特点</h2><ul>\n<li>业务模块化：页面组件按模块组织</li>\n<li>加载方式灵活：模块既可异步加载，也可同步加载</li>\n<li>模块高度内聚：模块包括前端页面组件和后端业务逻辑</li>\n<li>参数配置灵活：模块中的前后端可以单独进行参数配置</li>\n<li>国际化：模块中的前后端均支持独立的国际化</li>\n<li>模块隔离：模块的页面、数据、逻辑、路由、配置等元素均进行了命名空间隔离处理，避免模块之间的变量污染与冲突</li>\n<li>超级易用的事务处理：只需在路由记录上配置一个参数，即可完美实现数据库的事务处理。</li>\n<li>渐进式开发：由于模块的高度内聚，可以将业务以模块的形式沉淀，在多个项目中重复使用，既可贡献到npm开源社区，也可部署到公司内部私有npm仓库。</li>\n</ul>\n<blockquote>\n<p>有了EggBorn.js，从此可复用的不仅仅是组件，还有业务模块。</p>\n</blockquote>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><h3 id=\"安装EggBorn-js脚手架\"><a href=\"#安装EggBorn-js脚手架\" class=\"headerlink\" title=\"安装EggBorn.js脚手架\"></a>安装EggBorn.js脚手架</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm i -g egg-born</div></pre></td></tr></table></figure>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ egg-born project_name</div></pre></td></tr></table></figure>\n<blockquote>\n<p>EggBorn.js目前提供了2个项目脚手架，分别是</p>\n<ul>\n<li><code>front-backend-mysql</code>  – 前后端全栈项目模板</li>\n<li><code>front</code>                – 前端项目模板，后端可采用其他方案</li>\n</ul>\n</blockquote>\n<h3 id=\"配置mysql连接参数\"><a href=\"#配置mysql连接参数\" class=\"headerlink\" title=\"配置mysql连接参数\"></a>配置mysql连接参数</h3><p>如果采用了“front-backend-mysql”模板，请配置mysql连接参数（空数据库即可）</p>\n<p>编辑<code>src/backend/config/config.default.js</code>文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mysql</span></div><div class=\"line\">config.mysql = &#123;</div><div class=\"line\">  clients: &#123;</div><div class=\"line\">    <span class=\"comment\">// donot change the name  </span></div><div class=\"line\">    __ebdb: &#123;</div><div class=\"line\">      host: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">      port: <span class=\"string\">'3306'</span>,</div><div class=\"line\">      user: <span class=\"string\">'travis'</span>,</div><div class=\"line\">      password: <span class=\"string\">''</span>,</div><div class=\"line\">      database: <span class=\"string\">'egg-born'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> path/to/project</div><div class=\"line\">$ npm i</div><div class=\"line\">$ npm run dev:backend  -- 启动后端服务</div><div class=\"line\">$ npm run dev:front    -- 启动前端服务</div></pre></td></tr></table></figure>\n<h2 id=\"EggBorn-js架构图\"><a href=\"#EggBorn-js架构图\" class=\"headerlink\" title=\"EggBorn.js架构图\"></a>EggBorn.js架构图</h2><h3 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/EggBornJS.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"项目文件结构\"><a href=\"#项目文件结构\" class=\"headerlink\" title=\"项目文件结构\"></a>项目文件结构</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/structure.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"模块文件结构\"><a href=\"#模块文件结构\" class=\"headerlink\" title=\"模块文件结构\"></a>模块文件结构</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/privatemodule.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/publicmodule.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h2><h3 id=\"启动文件\"><a href=\"#启动文件\" class=\"headerlink\" title=\"启动文件\"></a>启动文件</h3><p>前端架构提供两种方案</p>\n<blockquote>\n<ol>\n<li>Vue.js + Framework7</li>\n<li>Vue.js + Vue Router</li>\n</ol>\n</blockquote>\n<p>Framework7是移动开发专属UI界面库，内置路由机制。<br>Vue Router是Vue.js官方路由库，使用Vue Router可搭配其他各种UI界面库。</p>\n<p>在<code>src/front/main.js</code>文件中进行切换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// choose one</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//   framework7</span></div><div class=\"line\"><span class=\"keyword\">import</span> main <span class=\"keyword\">from</span> <span class=\"string\">'./framework7/main.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//   vuerouter</span></div><div class=\"line\"><span class=\"comment\">// import main from './vuerouter/main.js';</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// export</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> main;</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p><code>src/front/config/config.js</code>文件中的参数配置可以覆盖模块的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'aa-hello'</span>: &#123;</div><div class=\"line\">      mode: <span class=\"number\">2</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>在<code>src/front/config/locale</code>目录添加国际化文件，可以覆盖模块的国际化语言<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"string\">'模式'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h2><h3 id=\"后端架构\"><a href=\"#后端架构\" class=\"headerlink\" title=\"后端架构\"></a>后端架构</h3><p>后端架构基于Egg.js，完整支持Egg.js提供的所有功能与特性</p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/\" target=\"_blank\" rel=\"external\">Egg.js</a></p>\n</blockquote>\n<h3 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p><code>src/backend/config/config.default.js</code>文件中的参数配置可以覆盖模块的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">appInfo</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> config = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// module config</span></div><div class=\"line\">  config.module = &#123;</div><div class=\"line\">    <span class=\"string\">'aa-hello'</span>: &#123;</div><div class=\"line\">      mode: <span class=\"number\">2</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"国际化-1\"><a href=\"#国际化-1\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>在<code>src/backend/config/locale</code>目录添加国际化文件，可以覆盖模块的国际化语言<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"string\">'模式'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"模块开发\"><a href=\"#模块开发\" class=\"headerlink\" title=\"模块开发\"></a>模块开发</h2><h3 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a>命名约定</h3><p>为了不断沉淀业务模块，达到高度可复用的效果，所有模块的命名空间必须充分隔离，避免相互污染与冲突，故采用如下命名方式：</p>\n<blockquote>\n<p>egg-born-module-{providerId}-{moduleName}</p>\n</blockquote>\n<p>如模块<code>egg-born-module-a-version</code>，各环节命名信息如下：</p>\n<blockquote>\n<ul>\n<li><code>providerId</code>: a</li>\n<li><code>moduleName</code>: version</li>\n<li><code>fullName</code>: egg-born-module-a-version</li>\n<li><code>relativeName</code>: a-version</li>\n<li>前端页面路由地址: /a/version/{page}</li>\n<li>后端API路由地址：/a/version/{controller}/{action}</li>\n</ul>\n</blockquote>\n<h3 id=\"加载机制\"><a href=\"#加载机制\" class=\"headerlink\" title=\"加载机制\"></a>加载机制</h3><p>模块既支持异步加载，也支持同步加载。默认是异步加载，如果要同步加载，只需在模块名称后面加上<code>-sync</code>后缀，如模块<code>egg-born-module-aa-login-sync</code>。</p>\n<h3 id=\"新建模块\"><a href=\"#新建模块\" class=\"headerlink\" title=\"新建模块\"></a>新建模块</h3><p>进入<code>src/module</code>目录执行脚手架，创建模块文件骨架<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ egg-born module_relative_name</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>EggBorn.js目前提供了2个模块脚手架，分别是</p>\n<ul>\n<li><code>module</code>               – 全栈模块模板</li>\n<li><code>module-front</code>         – 前端模块模板</li>\n</ul>\n</blockquote>\n<h3 id=\"模块前端开发\"><a href=\"#模块前端开发\" class=\"headerlink\" title=\"模块前端开发\"></a>模块前端开发</h3><h4 id=\"前端页面路由\"><a href=\"#前端页面路由\" class=\"headerlink\" title=\"前端页面路由\"></a>前端页面路由</h4><p>在<code>front/src/routes.js</code>中添加页面路由，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">`./pages/<span class=\"subst\">$&#123;name&#125;</span>.vue`</span>).default;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'welcome/:who'</span>, <span class=\"attr\">component</span>: load(<span class=\"string\">'welcome'</span>) &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'profile'</span>, <span class=\"attr\">component</span>: load(<span class=\"string\">'profile'</span>), <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span> &#125; &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">component</span>: load(<span class=\"string\">'login'</span>) &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><code>path</code>: 路径，支持参数。以<code>/</code>开头，代表根页面组件。<code>login</code>页面组件通常这样配置</li>\n<li><code>component</code>: 页面组件对象</li>\n<li><code>meta</code>: 路由元数据</li>\n<li><code>meta.requiresAuth</code>: 如果页面组件需要登录，须设为<code>true</code></li>\n</ul>\n</blockquote>\n<p>在页面中引用页面组件，请使用绝对路径，如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">f7-list-item</span> <span class=\"attr\">link</span>=<span class=\"string\">\"/aa/hello/welcome/You\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Welcome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">f7-list-item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">f7-list-item</span> <span class=\"attr\">link</span>=<span class=\"string\">\"/aa/hello/profile\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Profile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">f7-list-item</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"前端状态管理\"><a href=\"#前端状态管理\" class=\"headerlink\" title=\"前端状态管理\"></a>前端状态管理</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。EggBorn.js采用Vuex实现了完全隔离的模块状态管理机制。<br>在<code>front/src/store.js</code>中添加状态，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Vue</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    state: &#123;</div><div class=\"line\">      message: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在页面组件中访问本模块状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.$local.state.message;</div></pre></td></tr></table></figure></p>\n<p>在页面组件中访问其他模块状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.$store.state[providerId][moduleName].message;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"external\">Vuex</a></p>\n</blockquote>\n<h4 id=\"前端参数配置\"><a href=\"#前端参数配置\" class=\"headerlink\" title=\"前端参数配置\"></a>前端参数配置</h4><p>在<code>front/src/config/config.js</code>中添加配置信息，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"number\">1</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>只支持在页面组件中访问本模块内部的参数配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> mode = <span class=\"keyword\">this</span>.$config.mode;</div></pre></td></tr></table></figure></p>\n<h4 id=\"前端国际化\"><a href=\"#前端国际化\" class=\"headerlink\" title=\"前端国际化\"></a>前端国际化</h4><p>在<code>front/src/config/locale</code>目录添加国际化文件<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"string\">'模式'</span>,</div><div class=\"line\">  <span class=\"string\">\"Hello world! I'm %s.\"</span>: <span class=\"string\">'您好，世界！我是%s。'</span>,  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>国际化语言采取全局合并的方式，有利于语言资源的共享，在页面组件中访问方式如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> mode = <span class=\"keyword\">this</span>.$text(<span class=\"string\">'mode'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.$text(<span class=\"string\">\"Hello world! I'm %s.\"</span>,<span class=\"string\">'zhennann'</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"模块后端开发\"><a href=\"#模块后端开发\" class=\"headerlink\" title=\"模块后端开发\"></a>模块后端开发</h3><h4 id=\"后端api路由\"><a href=\"#后端api路由\" class=\"headerlink\" title=\"后端api路由\"></a>后端api路由</h4><p>在<code>backend/src/routes.js</code>中添加页面路由，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"built_in\">require</span>(<span class=\"string\">'./controller/home.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = [</div><div class=\"line\">  &#123; <span class=\"attr\">method</span>: <span class=\"string\">'get'</span>, <span class=\"attr\">path</span>: <span class=\"string\">'home/index'</span>, <span class=\"attr\">controller</span>: home, <span class=\"attr\">action</span>: <span class=\"string\">'index'</span>, <span class=\"attr\">transaction</span>: <span class=\"literal\">true</span> &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><code>method</code>: get/post等方法</li>\n<li><code>path</code>: 路径，支持参数</li>\n<li><code>component</code>: Controller对象</li>\n<li><code>action</code>: Controller方法，如果不设置，则自动采用path尾部单词</li>\n<li><code>transaction</code>: 默认为false，如果设为true，则启用数据库事务</li>\n</ul>\n</blockquote>\n<p>在前端页面组件中访问本模块api路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$api.get(<span class=\"string\">'home/index'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在前端页面组件中访问其他模块api路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$api.get(<span class=\"string\">'/providerId/moduleName/home/index'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"后端Controller\"><a href=\"#后端Controller\" class=\"headerlink\" title=\"后端Controller\"></a>后端Controller</h4><p>后端Controller的实现方式与Egg.js保持一致<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> index() &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> message = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.service.home.index();</div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.success(message);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> HomeController;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/zh-cn/basics/controller.html\" target=\"_blank\" rel=\"external\">Egg.js Controller</a></p>\n</blockquote>\n<h4 id=\"后端Service\"><a href=\"#后端Service\" class=\"headerlink\" title=\"后端Service\"></a>后端Service</h4><p>Service用于封装业务逻辑，供Controller调用，实现方式与Egg.js保持一致。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> index() &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.db.queryOne(<span class=\"string\">'show tables'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> Home;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>与Egg.js不同之处在于，Service使用ctx.db操作数据库，从而自动支持数据库事务。</p>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/zh-cn/basics/service.html\" target=\"_blank\" rel=\"external\">Egg.js Service</a></p>\n</blockquote>\n<h4 id=\"后端Controller调用\"><a href=\"#后端Controller调用\" class=\"headerlink\" title=\"后端Controller调用\"></a>后端Controller调用</h4><p>为了支持大型Web系统的开发，EggBorn.js支持模块后端Controller之间的调用，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.performAction(&#123;</div><div class=\"line\">  method: <span class=\"string\">'get'</span>,</div><div class=\"line\">  url: <span class=\"string\">'home/index'</span>,</div><div class=\"line\">  query: &#123;</div><div class=\"line\">    username: <span class=\"string\">'kevin'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  params: &#123;</div><div class=\"line\">    mode: <span class=\"number\">1</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  body: &#123;</div><div class=\"line\">    content: <span class=\"string\">'ready'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><code>method</code>: get/post等方法</li>\n<li><code>url</code>: 访问本模块的Controller使用相对路径，访问其他模块的Controller使用以<code>/</code>开头的绝对路径。</li>\n<li><code>query</code>、<code>params</code>、<code>body</code>: 与常规的Controller参数保持一致</li>\n</ul>\n</blockquote>\n<h4 id=\"后端数据库操作\"><a href=\"#后端数据库操作\" class=\"headerlink\" title=\"后端数据库操作\"></a>后端数据库操作</h4><p>后端数据库操作与Egg.js保持一致</p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/zh-cn/tutorials/mysql.html\" target=\"_blank\" rel=\"external\">Egg.js MySQL</a></p>\n</blockquote>\n<h4 id=\"后端数据库事务\"><a href=\"#后端数据库事务\" class=\"headerlink\" title=\"后端数据库事务\"></a>后端数据库事务</h4><p>EggBorn.js提供了更为便利的数据库事务实现方式，只需在后端api路由记录中配置transaction参数，Service使用ctx.db操作数据库。<br>如果是主Controller通过ctx.performAction调用子Controller，数据库事务开启规则如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">主Controller配置</th>\n<th style=\"text-align:left\">子Controller配置</th>\n<th style=\"text-align:left\">子Controller实际启用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">false</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"后端参数配置\"><a href=\"#后端参数配置\" class=\"headerlink\" title=\"后端参数配置\"></a>后端参数配置</h4><p>在<code>backend/src/config/config.js</code>中添加配置信息，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">appInfo</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> config = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  config.message = <span class=\"string\">\"Hello world! I'm %s.\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>访问本模块内部的参数配置示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.ctx.config.message;</div></pre></td></tr></table></figure></p>\n<h4 id=\"后端国际化\"><a href=\"#后端国际化\" class=\"headerlink\" title=\"后端国际化\"></a>后端国际化</h4><p>在<code>backend/src/config/locale</code>目录添加国际化文件<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"string\">\"Hello world! I'm %s.\"</span>: <span class=\"string\">'您好，世界！我是%s。'</span>,</div><div class=\"line\">  <span class=\"string\">'not found'</span>: <span class=\"string\">'未发现'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>国际化语言采取全局合并的方式，有利于语言资源的共享，访问方式如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> notFound = <span class=\"keyword\">this</span>.ctx.text(<span class=\"string\">'not found'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.ctx.text(<span class=\"string\">\"Hello world! I'm %s.\"</span>, <span class=\"string\">'zhennann'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"后端错误处理\"><a href=\"#后端错误处理\" class=\"headerlink\" title=\"后端错误处理\"></a>后端错误处理</h4><p>在<code>backend/src/config/errors.js</code>文件中添加错误代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// error code should start from 1001</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"number\">1001</span>: <span class=\"string\">'not found'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>返回错误信息示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.ctx.fail(<span class=\"number\">1001</span>);</div></pre></td></tr></table></figure></p>\n<p>也可抛出异常示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.ctx.throw(<span class=\"number\">1001</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h2><h3 id=\"模块依赖\"><a href=\"#模块依赖\" class=\"headerlink\" title=\"模块依赖\"></a>模块依赖</h3><p>EggBorn.js通过package.json文件管理模块依赖关系。<br>比如，模块aa-module1依赖aa-module2，需要在模块aa-module1的package.json文件中作如下配置<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"egg-born-module-aa-module1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"eggBornModule\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"aa-module2\"</span>: <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"egg-born-module-aa-module2\"</span>: <span class=\"string\">\"^0.0.1\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>设置<code>&quot;egg-born-module-aa-module2&quot;: &quot;^0.0.1&quot;</code>，是为了在安装模块aa-module1时自动安装模块aa-module2。如果模块没有公开发布，就不必设置。</p>\n</blockquote>\n<h3 id=\"模块数据版本\"><a href=\"#模块数据版本\" class=\"headerlink\" title=\"模块数据版本\"></a>模块数据版本</h3><p>模块一般都要操作数据库，当模板版本升级时，数据库结构也有可能变动。EggBorn.js实现了模块数据版本的管理，便于业务模块的积累沉淀。</p>\n<p>在模块的package.json文件中配置fileVersion为当前数据版本<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"egg-born-module-aa-module1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"eggBornModule\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"fileVersion\"</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在模块后端添加Api路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">method</span>: <span class=\"string\">'post'</span>, <span class=\"attr\">path</span>: <span class=\"string\">'version/update'</span>, <span class=\"attr\">controller</span>: version &#125;</div></pre></td></tr></table></figure></p>\n<p>添加version Controller<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VersionController</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> update() &#123;</div><div class=\"line\">      <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.service.version.update(<span class=\"keyword\">this</span>.ctx.getInt(<span class=\"string\">'version'</span>));</div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.success();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> VersionController;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>添加version Service<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Version</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> update(version) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (version === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> Version;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>当启动后端服务时，EggBorn.js自动检测模块数据版本的变化，并执行相应的路由，完成数据的版本升级。</p>\n</blockquote>\n<h3 id=\"模块发布\"><a href=\"#模块发布\" class=\"headerlink\" title=\"模块发布\"></a>模块发布</h3><p>当项目中的模块代码稳定后，可以将模块公开发布，贡献到开源社区。也可以在公司内部建立npm私有仓库，然后把模块发布到私有仓库，形成公司资产，便于重复使用。<br>模块发布步骤如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> path/to/module      -- 进入模块目录</div><div class=\"line\">$ npm i                  -- 安装模块依赖</div><div class=\"line\">$ npm run build:front    -- 构建前端代码</div><div class=\"line\">$ npm run build:backend  -- 构建后端代码</div><div class=\"line\">$ npm publish            -- 发布至npm仓库</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试驱动\"><a href=\"#测试驱动\" class=\"headerlink\" title=\"测试驱动\"></a>测试驱动</h2><p>目前只支持后端测试驱动</p>\n<h3 id=\"后端Controller测试\"><a href=\"#后端Controller测试\" class=\"headerlink\" title=\"后端Controller测试\"></a>后端Controller测试</h3><p>在<code>backend/test/controller</code>目录添加Controller测试文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// controller/home.test.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, mock, assert &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'egg-mock/bootstrap'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> parseMockUrl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> prefix = app.mockUtil.parseUrlFromPackage(__dirname);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;prefix&#125;</span><span class=\"subst\">$&#123;url&#125;</span>`</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'test/controller/home.test.js'</span>, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'action:index'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> app.httpRequest().get(parseMockUrl(<span class=\"string\">'home/index'</span>));</div><div class=\"line\">    assert(result.body.code === <span class=\"number\">0</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"后端Service测试\"><a href=\"#后端Service测试\" class=\"headerlink\" title=\"后端Service测试\"></a>后端Service测试</h3><p>在<code>backend/test/service</code>目录添加Service测试文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// service/home.test.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, mock, assert &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'egg-mock/bootstrap'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> parseMockUrl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> app.mockUtil.parseUrlFromPackage(__dirname);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'test/service/home.test.js'</span>, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'index'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> ctx = app.mockContext(&#123; <span class=\"attr\">mockUrl</span>: parseMockUrl() &#125;);</div><div class=\"line\">    <span class=\"keyword\">const</span> message = <span class=\"keyword\">await</span> ctx.service.home.index();</div><div class=\"line\">    assert(message);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"执行测试\"><a href=\"#执行测试\" class=\"headerlink\" title=\"执行测试\"></a>执行测试</h3><p>在项目根目录执行测试<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run <span class=\"built_in\">test</span>:backend</div><div class=\"line\">$ npm run cov:backend</div></pre></td></tr></table></figure></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"构建前端代码\"><a href=\"#构建前端代码\" class=\"headerlink\" title=\"构建前端代码\"></a>构建前端代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run build:front</div></pre></td></tr></table></figure>\n<h3 id=\"启动后端服务\"><a href=\"#启动后端服务\" class=\"headerlink\" title=\"启动后端服务\"></a>启动后端服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run start:backend</div></pre></td></tr></table></figure>\n<h3 id=\"停止后端服务\"><a href=\"#停止后端服务\" class=\"headerlink\" title=\"停止后端服务\"></a>停止后端服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run stop:backend</div></pre></td></tr></table></figure>\n<h3 id=\"后端服务启动参数配置\"><a href=\"#后端服务启动参数配置\" class=\"headerlink\" title=\"后端服务启动参数配置\"></a>后端服务启动参数配置</h3><p>编辑<code>build/config.js</code>文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// backend</span></div><div class=\"line\"><span class=\"keyword\">const</span> backend = &#123;</div><div class=\"line\">  port: <span class=\"number\">7002</span>,</div><div class=\"line\">  hostname: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>强烈建议使用nginx托管前端静态资源，并反向代理后端服务，配置如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  listen <span class=\"number\">80</span>;</div><div class=\"line\">  server_name example.com www.example.com;</div><div class=\"line\">  set $node_port <span class=\"number\">7002</span>;</div><div class=\"line\"></div><div class=\"line\">  root /path/to/www;</div><div class=\"line\"></div><div class=\"line\">  location  /api/ &#123;</div><div class=\"line\">    proxy_http_version <span class=\"number\">1.1</span>;</div><div class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">    proxy_set_header Host $http_host;</div><div class=\"line\">    proxy_set_header X-NginX-<span class=\"built_in\">Proxy</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">    proxy_set_header Connection <span class=\"string\">\"upgrade\"</span>;</div><div class=\"line\">    proxy_pass http:<span class=\"comment\">//127.0.0.1:$node_port$request_uri;</span></div><div class=\"line\">    proxy_redirect off;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"GitHub贡献\"><a href=\"#GitHub贡献\" class=\"headerlink\" title=\"GitHub贡献\"></a>GitHub贡献</h2><blockquote>\n<p>有任何疑问，欢迎提交 <a href=\"https://github.com/zhennann/egg-born/issues\" target=\"_blank\" rel=\"external\">issue</a>， 或者直接修改提交 <a href=\"https://github.com/zhennann/egg-born/pulls\" target=\"_blank\" rel=\"external\">PR</a>！</p>\n</blockquote>\n","site":{"data":{"languages":{"zh-cn":"简体中文","en":"English"}}},"excerpt":"","more":"<h2 id=\"EggBorn-js是什么\"><a href=\"#EggBorn-js是什么\" class=\"headerlink\" title=\"EggBorn.js是什么\"></a>EggBorn.js是什么</h2><blockquote>\n<p>EggBorn.js是一款顶级Javascript全栈开发框架。</p>\n</blockquote>\n<p>EggBorn.js是采用Javascript进行全栈开发的最佳实践。<br>EggBorn.js不重复造轮子，而是采用业界最新的开源技术，进行全栈开发的最佳组合。<br>EggBorn.js前端采用Vue.js + Framework7 / Vue Router + Webpack，后端采用Koa.js + Egg.js，数据库采用mysql。<br>EggBorn.js时刻跟踪开源技术的最新成果，并持续优化，使整个框架时刻保持最佳状态。</p>\n<h2 id=\"EggBorn-js重点解决什么问题：业务模块化\"><a href=\"#EggBorn-js重点解决什么问题：业务模块化\" class=\"headerlink\" title=\"EggBorn.js重点解决什么问题：业务模块化\"></a>EggBorn.js重点解决什么问题：业务模块化</h2><p>Javascript技术的蓬勃发展，为前后端开发带来了更顺畅的体验，显著提升了开发效率。但仍有网友质疑Javascript能否胜任大型Web应用的开发。大型Web应用的特点是随着业务的增长，需要开发大量的页面组件。面对这种场景，一般有两种解决方案：</p>\n<blockquote>\n<p>1 采用单页面的构建方式，缺点是产生的部署包很大。<br>2 采用页面异步加载方式，缺点是页面过于零散，需要频繁与后端交互。</p>\n</blockquote>\n<p>EggBorn.js实现了第三种解决方案：</p>\n<blockquote>\n<p>3 页面组件按业务需求归类，进行模块化，并且实现了模块的异步加载机制，从而弥合了前两种解决方案的缺点，完美满足大型Web应用业务持续增长的需求。</p>\n</blockquote>\n<h2 id=\"EggBorn-js的技术特点\"><a href=\"#EggBorn-js的技术特点\" class=\"headerlink\" title=\"EggBorn.js的技术特点\"></a>EggBorn.js的技术特点</h2><ul>\n<li>业务模块化：页面组件按模块组织</li>\n<li>加载方式灵活：模块既可异步加载，也可同步加载</li>\n<li>模块高度内聚：模块包括前端页面组件和后端业务逻辑</li>\n<li>参数配置灵活：模块中的前后端可以单独进行参数配置</li>\n<li>国际化：模块中的前后端均支持独立的国际化</li>\n<li>模块隔离：模块的页面、数据、逻辑、路由、配置等元素均进行了命名空间隔离处理，避免模块之间的变量污染与冲突</li>\n<li>超级易用的事务处理：只需在路由记录上配置一个参数，即可完美实现数据库的事务处理。</li>\n<li>渐进式开发：由于模块的高度内聚，可以将业务以模块的形式沉淀，在多个项目中重复使用，既可贡献到npm开源社区，也可部署到公司内部私有npm仓库。</li>\n</ul>\n<blockquote>\n<p>有了EggBorn.js，从此可复用的不仅仅是组件，还有业务模块。</p>\n</blockquote>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><h3 id=\"安装EggBorn-js脚手架\"><a href=\"#安装EggBorn-js脚手架\" class=\"headerlink\" title=\"安装EggBorn.js脚手架\"></a>安装EggBorn.js脚手架</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm i -g egg-born</div></pre></td></tr></table></figure>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ egg-born project_name</div></pre></td></tr></table></figure>\n<blockquote>\n<p>EggBorn.js目前提供了2个项目脚手架，分别是</p>\n<ul>\n<li><code>front-backend-mysql</code>  – 前后端全栈项目模板</li>\n<li><code>front</code>                – 前端项目模板，后端可采用其他方案</li>\n</ul>\n</blockquote>\n<h3 id=\"配置mysql连接参数\"><a href=\"#配置mysql连接参数\" class=\"headerlink\" title=\"配置mysql连接参数\"></a>配置mysql连接参数</h3><p>如果采用了“front-backend-mysql”模板，请配置mysql连接参数（空数据库即可）</p>\n<p>编辑<code>src/backend/config/config.default.js</code>文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mysql</span></div><div class=\"line\">config.mysql = &#123;</div><div class=\"line\">  clients: &#123;</div><div class=\"line\">    <span class=\"comment\">// donot change the name  </span></div><div class=\"line\">    __ebdb: &#123;</div><div class=\"line\">      host: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">      port: <span class=\"string\">'3306'</span>,</div><div class=\"line\">      user: <span class=\"string\">'travis'</span>,</div><div class=\"line\">      password: <span class=\"string\">''</span>,</div><div class=\"line\">      database: <span class=\"string\">'egg-born'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> path/to/project</div><div class=\"line\">$ npm i</div><div class=\"line\">$ npm run dev:backend  -- 启动后端服务</div><div class=\"line\">$ npm run dev:front    -- 启动前端服务</div></pre></td></tr></table></figure>\n<h2 id=\"EggBorn-js架构图\"><a href=\"#EggBorn-js架构图\" class=\"headerlink\" title=\"EggBorn.js架构图\"></a>EggBorn.js架构图</h2><h3 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/EggBornJS.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"项目文件结构\"><a href=\"#项目文件结构\" class=\"headerlink\" title=\"项目文件结构\"></a>项目文件结构</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/structure.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"模块文件结构\"><a href=\"#模块文件结构\" class=\"headerlink\" title=\"模块文件结构\"></a>模块文件结构</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/privatemodule.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/zh-cn/images/publicmodule.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h2><h3 id=\"启动文件\"><a href=\"#启动文件\" class=\"headerlink\" title=\"启动文件\"></a>启动文件</h3><p>前端架构提供两种方案</p>\n<blockquote>\n<ol>\n<li>Vue.js + Framework7</li>\n<li>Vue.js + Vue Router</li>\n</ol>\n</blockquote>\n<p>Framework7是移动开发专属UI界面库，内置路由机制。<br>Vue Router是Vue.js官方路由库，使用Vue Router可搭配其他各种UI界面库。</p>\n<p>在<code>src/front/main.js</code>文件中进行切换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// choose one</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//   framework7</span></div><div class=\"line\"><span class=\"keyword\">import</span> main <span class=\"keyword\">from</span> <span class=\"string\">'./framework7/main.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//   vuerouter</span></div><div class=\"line\"><span class=\"comment\">// import main from './vuerouter/main.js';</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// export</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> main;</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p><code>src/front/config/config.js</code>文件中的参数配置可以覆盖模块的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'aa-hello'</span>: &#123;</div><div class=\"line\">      mode: <span class=\"number\">2</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>在<code>src/front/config/locale</code>目录添加国际化文件，可以覆盖模块的国际化语言<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"string\">'模式'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h2><h3 id=\"后端架构\"><a href=\"#后端架构\" class=\"headerlink\" title=\"后端架构\"></a>后端架构</h3><p>后端架构基于Egg.js，完整支持Egg.js提供的所有功能与特性</p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/\" target=\"_blank\" rel=\"external\">Egg.js</a></p>\n</blockquote>\n<h3 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p><code>src/backend/config/config.default.js</code>文件中的参数配置可以覆盖模块的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">appInfo</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> config = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// module config</span></div><div class=\"line\">  config.module = &#123;</div><div class=\"line\">    <span class=\"string\">'aa-hello'</span>: &#123;</div><div class=\"line\">      mode: <span class=\"number\">2</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"国际化-1\"><a href=\"#国际化-1\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>在<code>src/backend/config/locale</code>目录添加国际化文件，可以覆盖模块的国际化语言<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"string\">'模式'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"模块开发\"><a href=\"#模块开发\" class=\"headerlink\" title=\"模块开发\"></a>模块开发</h2><h3 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a>命名约定</h3><p>为了不断沉淀业务模块，达到高度可复用的效果，所有模块的命名空间必须充分隔离，避免相互污染与冲突，故采用如下命名方式：</p>\n<blockquote>\n<p>egg-born-module-{providerId}-{moduleName}</p>\n</blockquote>\n<p>如模块<code>egg-born-module-a-version</code>，各环节命名信息如下：</p>\n<blockquote>\n<ul>\n<li><code>providerId</code>: a</li>\n<li><code>moduleName</code>: version</li>\n<li><code>fullName</code>: egg-born-module-a-version</li>\n<li><code>relativeName</code>: a-version</li>\n<li>前端页面路由地址: /a/version/{page}</li>\n<li>后端API路由地址：/a/version/{controller}/{action}</li>\n</ul>\n</blockquote>\n<h3 id=\"加载机制\"><a href=\"#加载机制\" class=\"headerlink\" title=\"加载机制\"></a>加载机制</h3><p>模块既支持异步加载，也支持同步加载。默认是异步加载，如果要同步加载，只需在模块名称后面加上<code>-sync</code>后缀，如模块<code>egg-born-module-aa-login-sync</code>。</p>\n<h3 id=\"新建模块\"><a href=\"#新建模块\" class=\"headerlink\" title=\"新建模块\"></a>新建模块</h3><p>进入<code>src/module</code>目录执行脚手架，创建模块文件骨架<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ egg-born module_relative_name</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>EggBorn.js目前提供了2个模块脚手架，分别是</p>\n<ul>\n<li><code>module</code>               – 全栈模块模板</li>\n<li><code>module-front</code>         – 前端模块模板</li>\n</ul>\n</blockquote>\n<h3 id=\"模块前端开发\"><a href=\"#模块前端开发\" class=\"headerlink\" title=\"模块前端开发\"></a>模块前端开发</h3><h4 id=\"前端页面路由\"><a href=\"#前端页面路由\" class=\"headerlink\" title=\"前端页面路由\"></a>前端页面路由</h4><p>在<code>front/src/routes.js</code>中添加页面路由，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">`./pages/<span class=\"subst\">$&#123;name&#125;</span>.vue`</span>).default;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'welcome/:who'</span>, <span class=\"attr\">component</span>: load(<span class=\"string\">'welcome'</span>) &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'profile'</span>, <span class=\"attr\">component</span>: load(<span class=\"string\">'profile'</span>), <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span> &#125; &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">component</span>: load(<span class=\"string\">'login'</span>) &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><code>path</code>: 路径，支持参数。以<code>/</code>开头，代表根页面组件。<code>login</code>页面组件通常这样配置</li>\n<li><code>component</code>: 页面组件对象</li>\n<li><code>meta</code>: 路由元数据</li>\n<li><code>meta.requiresAuth</code>: 如果页面组件需要登录，须设为<code>true</code></li>\n</ul>\n</blockquote>\n<p>在页面中引用页面组件，请使用绝对路径，如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">f7-list-item</span> <span class=\"attr\">link</span>=<span class=\"string\">\"/aa/hello/welcome/You\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Welcome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">f7-list-item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">f7-list-item</span> <span class=\"attr\">link</span>=<span class=\"string\">\"/aa/hello/profile\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Profile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">f7-list-item</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"前端状态管理\"><a href=\"#前端状态管理\" class=\"headerlink\" title=\"前端状态管理\"></a>前端状态管理</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。EggBorn.js采用Vuex实现了完全隔离的模块状态管理机制。<br>在<code>front/src/store.js</code>中添加状态，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Vue</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    state: &#123;</div><div class=\"line\">      message: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在页面组件中访问本模块状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.$local.state.message;</div></pre></td></tr></table></figure></p>\n<p>在页面组件中访问其他模块状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.$store.state[providerId][moduleName].message;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"external\">Vuex</a></p>\n</blockquote>\n<h4 id=\"前端参数配置\"><a href=\"#前端参数配置\" class=\"headerlink\" title=\"前端参数配置\"></a>前端参数配置</h4><p>在<code>front/src/config/config.js</code>中添加配置信息，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"number\">1</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>只支持在页面组件中访问本模块内部的参数配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> mode = <span class=\"keyword\">this</span>.$config.mode;</div></pre></td></tr></table></figure></p>\n<h4 id=\"前端国际化\"><a href=\"#前端国际化\" class=\"headerlink\" title=\"前端国际化\"></a>前端国际化</h4><p>在<code>front/src/config/locale</code>目录添加国际化文件<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  mode: <span class=\"string\">'模式'</span>,</div><div class=\"line\">  <span class=\"string\">\"Hello world! I'm %s.\"</span>: <span class=\"string\">'您好，世界！我是%s。'</span>,  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>国际化语言采取全局合并的方式，有利于语言资源的共享，在页面组件中访问方式如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> mode = <span class=\"keyword\">this</span>.$text(<span class=\"string\">'mode'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.$text(<span class=\"string\">\"Hello world! I'm %s.\"</span>,<span class=\"string\">'zhennann'</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"模块后端开发\"><a href=\"#模块后端开发\" class=\"headerlink\" title=\"模块后端开发\"></a>模块后端开发</h3><h4 id=\"后端api路由\"><a href=\"#后端api路由\" class=\"headerlink\" title=\"后端api路由\"></a>后端api路由</h4><p>在<code>backend/src/routes.js</code>中添加页面路由，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"built_in\">require</span>(<span class=\"string\">'./controller/home.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = [</div><div class=\"line\">  &#123; <span class=\"attr\">method</span>: <span class=\"string\">'get'</span>, <span class=\"attr\">path</span>: <span class=\"string\">'home/index'</span>, <span class=\"attr\">controller</span>: home, <span class=\"attr\">action</span>: <span class=\"string\">'index'</span>, <span class=\"attr\">transaction</span>: <span class=\"literal\">true</span> &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><code>method</code>: get/post等方法</li>\n<li><code>path</code>: 路径，支持参数</li>\n<li><code>component</code>: Controller对象</li>\n<li><code>action</code>: Controller方法，如果不设置，则自动采用path尾部单词</li>\n<li><code>transaction</code>: 默认为false，如果设为true，则启用数据库事务</li>\n</ul>\n</blockquote>\n<p>在前端页面组件中访问本模块api路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$api.get(<span class=\"string\">'home/index'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在前端页面组件中访问其他模块api路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$api.get(<span class=\"string\">'/providerId/moduleName/home/index'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"后端Controller\"><a href=\"#后端Controller\" class=\"headerlink\" title=\"后端Controller\"></a>后端Controller</h4><p>后端Controller的实现方式与Egg.js保持一致<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> index() &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> message = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.service.home.index();</div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.success(message);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> HomeController;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/zh-cn/basics/controller.html\" target=\"_blank\" rel=\"external\">Egg.js Controller</a></p>\n</blockquote>\n<h4 id=\"后端Service\"><a href=\"#后端Service\" class=\"headerlink\" title=\"后端Service\"></a>后端Service</h4><p>Service用于封装业务逻辑，供Controller调用，实现方式与Egg.js保持一致。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> index() &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.db.queryOne(<span class=\"string\">'show tables'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> Home;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>与Egg.js不同之处在于，Service使用ctx.db操作数据库，从而自动支持数据库事务。</p>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/zh-cn/basics/service.html\" target=\"_blank\" rel=\"external\">Egg.js Service</a></p>\n</blockquote>\n<h4 id=\"后端Controller调用\"><a href=\"#后端Controller调用\" class=\"headerlink\" title=\"后端Controller调用\"></a>后端Controller调用</h4><p>为了支持大型Web系统的开发，EggBorn.js支持模块后端Controller之间的调用，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.performAction(&#123;</div><div class=\"line\">  method: <span class=\"string\">'get'</span>,</div><div class=\"line\">  url: <span class=\"string\">'home/index'</span>,</div><div class=\"line\">  query: &#123;</div><div class=\"line\">    username: <span class=\"string\">'kevin'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  params: &#123;</div><div class=\"line\">    mode: <span class=\"number\">1</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  body: &#123;</div><div class=\"line\">    content: <span class=\"string\">'ready'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><code>method</code>: get/post等方法</li>\n<li><code>url</code>: 访问本模块的Controller使用相对路径，访问其他模块的Controller使用以<code>/</code>开头的绝对路径。</li>\n<li><code>query</code>、<code>params</code>、<code>body</code>: 与常规的Controller参数保持一致</li>\n</ul>\n</blockquote>\n<h4 id=\"后端数据库操作\"><a href=\"#后端数据库操作\" class=\"headerlink\" title=\"后端数据库操作\"></a>后端数据库操作</h4><p>后端数据库操作与Egg.js保持一致</p>\n<blockquote>\n<p>更多信息，请参阅: <a href=\"https://eggjs.org/zh-cn/tutorials/mysql.html\" target=\"_blank\" rel=\"external\">Egg.js MySQL</a></p>\n</blockquote>\n<h4 id=\"后端数据库事务\"><a href=\"#后端数据库事务\" class=\"headerlink\" title=\"后端数据库事务\"></a>后端数据库事务</h4><p>EggBorn.js提供了更为便利的数据库事务实现方式，只需在后端api路由记录中配置transaction参数，Service使用ctx.db操作数据库。<br>如果是主Controller通过ctx.performAction调用子Controller，数据库事务开启规则如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">主Controller配置</th>\n<th style=\"text-align:left\">子Controller配置</th>\n<th style=\"text-align:left\">子Controller实际启用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">false</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"后端参数配置\"><a href=\"#后端参数配置\" class=\"headerlink\" title=\"后端参数配置\"></a>后端参数配置</h4><p>在<code>backend/src/config/config.js</code>中添加配置信息，如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">appInfo</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> config = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  config.message = <span class=\"string\">\"Hello world! I'm %s.\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>访问本模块内部的参数配置示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.ctx.config.message;</div></pre></td></tr></table></figure></p>\n<h4 id=\"后端国际化\"><a href=\"#后端国际化\" class=\"headerlink\" title=\"后端国际化\"></a>后端国际化</h4><p>在<code>backend/src/config/locale</code>目录添加国际化文件<br><code>zh-cn.js</code>文件中的语言定义示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"string\">\"Hello world! I'm %s.\"</span>: <span class=\"string\">'您好，世界！我是%s。'</span>,</div><div class=\"line\">  <span class=\"string\">'not found'</span>: <span class=\"string\">'未发现'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>国际化语言采取全局合并的方式，有利于语言资源的共享，访问方式如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> notFound = <span class=\"keyword\">this</span>.ctx.text(<span class=\"string\">'not found'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"keyword\">this</span>.ctx.text(<span class=\"string\">\"Hello world! I'm %s.\"</span>, <span class=\"string\">'zhennann'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"后端错误处理\"><a href=\"#后端错误处理\" class=\"headerlink\" title=\"后端错误处理\"></a>后端错误处理</h4><p>在<code>backend/src/config/errors.js</code>文件中添加错误代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// error code should start from 1001</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"number\">1001</span>: <span class=\"string\">'not found'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>返回错误信息示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.ctx.fail(<span class=\"number\">1001</span>);</div></pre></td></tr></table></figure></p>\n<p>也可抛出异常示例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.ctx.throw(<span class=\"number\">1001</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h2><h3 id=\"模块依赖\"><a href=\"#模块依赖\" class=\"headerlink\" title=\"模块依赖\"></a>模块依赖</h3><p>EggBorn.js通过package.json文件管理模块依赖关系。<br>比如，模块aa-module1依赖aa-module2，需要在模块aa-module1的package.json文件中作如下配置<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"egg-born-module-aa-module1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"eggBornModule\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"aa-module2\"</span>: <span class=\"string\">\"0.0.1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"egg-born-module-aa-module2\"</span>: <span class=\"string\">\"^0.0.1\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>设置<code>&quot;egg-born-module-aa-module2&quot;: &quot;^0.0.1&quot;</code>，是为了在安装模块aa-module1时自动安装模块aa-module2。如果模块没有公开发布，就不必设置。</p>\n</blockquote>\n<h3 id=\"模块数据版本\"><a href=\"#模块数据版本\" class=\"headerlink\" title=\"模块数据版本\"></a>模块数据版本</h3><p>模块一般都要操作数据库，当模板版本升级时，数据库结构也有可能变动。EggBorn.js实现了模块数据版本的管理，便于业务模块的积累沉淀。</p>\n<p>在模块的package.json文件中配置fileVersion为当前数据版本<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"egg-born-module-aa-module1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"eggBornModule\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"fileVersion\"</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在模块后端添加Api路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">method</span>: <span class=\"string\">'post'</span>, <span class=\"attr\">path</span>: <span class=\"string\">'version/update'</span>, <span class=\"attr\">controller</span>: version &#125;</div></pre></td></tr></table></figure></p>\n<p>添加version Controller<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VersionController</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> update() &#123;</div><div class=\"line\">      <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.service.version.update(<span class=\"keyword\">this</span>.ctx.getInt(<span class=\"string\">'version'</span>));</div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.success();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> VersionController;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>添加version Service<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Version</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">async</span> update(version) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (version === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> Version;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>当启动后端服务时，EggBorn.js自动检测模块数据版本的变化，并执行相应的路由，完成数据的版本升级。</p>\n</blockquote>\n<h3 id=\"模块发布\"><a href=\"#模块发布\" class=\"headerlink\" title=\"模块发布\"></a>模块发布</h3><p>当项目中的模块代码稳定后，可以将模块公开发布，贡献到开源社区。也可以在公司内部建立npm私有仓库，然后把模块发布到私有仓库，形成公司资产，便于重复使用。<br>模块发布步骤如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> path/to/module      -- 进入模块目录</div><div class=\"line\">$ npm i                  -- 安装模块依赖</div><div class=\"line\">$ npm run build:front    -- 构建前端代码</div><div class=\"line\">$ npm run build:backend  -- 构建后端代码</div><div class=\"line\">$ npm publish            -- 发布至npm仓库</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试驱动\"><a href=\"#测试驱动\" class=\"headerlink\" title=\"测试驱动\"></a>测试驱动</h2><p>目前只支持后端测试驱动</p>\n<h3 id=\"后端Controller测试\"><a href=\"#后端Controller测试\" class=\"headerlink\" title=\"后端Controller测试\"></a>后端Controller测试</h3><p>在<code>backend/test/controller</code>目录添加Controller测试文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// controller/home.test.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, mock, assert &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'egg-mock/bootstrap'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> parseMockUrl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> prefix = app.mockUtil.parseUrlFromPackage(__dirname);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;prefix&#125;</span><span class=\"subst\">$&#123;url&#125;</span>`</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'test/controller/home.test.js'</span>, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'action:index'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> app.httpRequest().get(parseMockUrl(<span class=\"string\">'home/index'</span>));</div><div class=\"line\">    assert(result.body.code === <span class=\"number\">0</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"后端Service测试\"><a href=\"#后端Service测试\" class=\"headerlink\" title=\"后端Service测试\"></a>后端Service测试</h3><p>在<code>backend/test/service</code>目录添加Service测试文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// service/home.test.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, mock, assert &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'egg-mock/bootstrap'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> parseMockUrl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> app.mockUtil.parseUrlFromPackage(__dirname);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'test/service/home.test.js'</span>, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'index'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> ctx = app.mockContext(&#123; <span class=\"attr\">mockUrl</span>: parseMockUrl() &#125;);</div><div class=\"line\">    <span class=\"keyword\">const</span> message = <span class=\"keyword\">await</span> ctx.service.home.index();</div><div class=\"line\">    assert(message);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"执行测试\"><a href=\"#执行测试\" class=\"headerlink\" title=\"执行测试\"></a>执行测试</h3><p>在项目根目录执行测试<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run <span class=\"built_in\">test</span>:backend</div><div class=\"line\">$ npm run cov:backend</div></pre></td></tr></table></figure></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"构建前端代码\"><a href=\"#构建前端代码\" class=\"headerlink\" title=\"构建前端代码\"></a>构建前端代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run build:front</div></pre></td></tr></table></figure>\n<h3 id=\"启动后端服务\"><a href=\"#启动后端服务\" class=\"headerlink\" title=\"启动后端服务\"></a>启动后端服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run start:backend</div></pre></td></tr></table></figure>\n<h3 id=\"停止后端服务\"><a href=\"#停止后端服务\" class=\"headerlink\" title=\"停止后端服务\"></a>停止后端服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run stop:backend</div></pre></td></tr></table></figure>\n<h3 id=\"后端服务启动参数配置\"><a href=\"#后端服务启动参数配置\" class=\"headerlink\" title=\"后端服务启动参数配置\"></a>后端服务启动参数配置</h3><p>编辑<code>build/config.js</code>文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// backend</span></div><div class=\"line\"><span class=\"keyword\">const</span> backend = &#123;</div><div class=\"line\">  port: <span class=\"number\">7002</span>,</div><div class=\"line\">  hostname: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>强烈建议使用nginx托管前端静态资源，并反向代理后端服务，配置如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  listen <span class=\"number\">80</span>;</div><div class=\"line\">  server_name example.com www.example.com;</div><div class=\"line\">  set $node_port <span class=\"number\">7002</span>;</div><div class=\"line\"></div><div class=\"line\">  root /path/to/www;</div><div class=\"line\"></div><div class=\"line\">  location  /api/ &#123;</div><div class=\"line\">    proxy_http_version <span class=\"number\">1.1</span>;</div><div class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">    proxy_set_header Host $http_host;</div><div class=\"line\">    proxy_set_header X-NginX-<span class=\"built_in\">Proxy</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">    proxy_set_header Connection <span class=\"string\">\"upgrade\"</span>;</div><div class=\"line\">    proxy_pass http:<span class=\"comment\">//127.0.0.1:$node_port$request_uri;</span></div><div class=\"line\">    proxy_redirect off;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"GitHub贡献\"><a href=\"#GitHub贡献\" class=\"headerlink\" title=\"GitHub贡献\"></a>GitHub贡献</h2><blockquote>\n<p>有任何疑问，欢迎提交 <a href=\"https://github.com/zhennann/egg-born/issues\" target=\"_blank\" rel=\"external\">issue</a>， 或者直接修改提交 <a href=\"https://github.com/zhennann/egg-born/pulls\" target=\"_blank\" rel=\"external\">PR</a>！</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj91nwjos0000ekudmc0sonnl","category_id":"cj91nwjp00001ekudzz9txzjo","_id":"cj91nwjp30002ekud9wdf6b9i"}],"PostTag":[],"Tag":[]}}