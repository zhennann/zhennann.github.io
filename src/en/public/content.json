{"meta":{"title":"EggBorn.js","subtitle":"The Ultimate Javascript Full Stack Framework","description":"The Ultimate Javascript Full Stack Framework","author":"zhennann","url":"http://egg-born.org/en"},"pages":[],"posts":[{"title":"EggBorn.js Showcase - Watch Articles","slug":"watcharticles","date":"2017-11-13T10:05:20.000Z","updated":"2017-11-13T10:53:03.755Z","comments":true,"path":"showcase/watcharticles/","link":"","permalink":"http://egg-born.org/en/showcase/watcharticles/","excerpt":"","text":"EggBorn.js Showcase: Watch ArticlesThis is a showcase for EggBorn.js, and also is a powerful tool to watch articles’s statistics automatically, such as visits, stars, replies, etc. Vue.js + Framework7 + Koa.js + Egg.js + MySQL + GitHub Passport Try The ShowcaseWebsite Website: http://wa.egg-born.org QRCode: Screenshots How To UseAppend your article’s url to the system, which will fetch the article’s statistics automatically with the corresponding pattern. If has not the corresponding pattern for the article, you can create one. Pattern LibraryWelcome to fork the repo watch-articles, and create your own patterns, then submit PR, and then post them here! Pattern Author github-repo zhennann cnode-topic zhennann juejin-im-post zhennann Getting StartedInstallation1$ npm install Setup MySQLEdit file: src/backend/config/config.default.js 12345678910111213// mysqlconfig.mysql = &#123; clients: &#123; // donot change the name __ebdb: &#123; host: '127.0.0.1', port: '3306', user: 'travis', password: '', database: 'watch-articles', &#125;, &#125;,&#125;; RunStart backend service1$ npm run dev:backend Start front service1$ npm run dev:front Test12$ npm run test:backend$ npm run cov:backend","categories":[{"name":"showcase","slug":"showcase","permalink":"http://egg-born.org/en/categories/showcase/"}],"tags":[]},{"title":"EggBorn.js Development Guide","slug":"tutorial","date":"2017-10-17T10:18:14.000Z","updated":"2017-11-13T10:31:24.315Z","comments":true,"path":"docs/tutorial/","link":"","permalink":"http://egg-born.org/en/docs/tutorial/","excerpt":"","text":"What is EggBorn.js? EggBorn.js is the Ultimate Javascript Full Stack Framework. EggBorn.js is the best practice for implementing full stack with Javascript.EggBorn.js does not ‘Reinvent the Wheel’, but uses the latest open source technology, so as to achieve the best combination of the full stack development technology.The frontend of EggBorn.js uses Vue.js + Framework 7 / Vue Router + Webpck, while the backend uses Koa.js + Egg.js, and the database uses mysql.EggBorn.js keeps track of the latest achievements in open source technology, and continues to optimize to keep the entire framework in the best status. EggBorn.js Focus on: Business ModularizationWith the developing of the javascript technology, the experience of the frontend and backend development becomes smoother, and the development efficiency enhance significantly. However, some friends still doubt whether it can be competent for the development of large-scale web applications. Large-scale web applications are characterized by the need to develop a large number of page components as business grows. Faced with this situation, generally there are two solutions: 1 Build as a single page application: The disadvantage is that the deployment package is very large.2 All page components are loaded asynchronously: The disadvantage is that the pages are too scattered, so the frontend should interact with the backend frequently. EggBorn.js implements the third solution: 3 The page components are classified by business requirements, which is business modularization, and implements the business module’s asynchronous loading mechanism. Thus it makes up the shortcomings of the first two solutions and satisfies the needs of the large-scale web application. EggBorn.js Technical Features Business Modularization: The page components are arranged as modules. Loading Flexibility: Modules can be loaded asynchronously or synchronously. Highly Modular Cohesion: The module includes frontend page components and backend business logics. Parameter Configuration Flexibility: Both frontend and backend of the module can be configured separately. I18N: Both frontend and backend of the module support i18n separately. Module Isolation: Module’s pages, data, logic, routing, configuration and other elements have been through namespace isolation processing, which avoids the variable pollutions and conflicts. Easy Transaction Processing: Just configuring a parameter on the routing record can process the database transaction perfectly. Progressive Development: Due to the high degree of cohesion of the module, EggBorn.js can deposit the business in the form of module, which can be reused in multiple projects. Business modules can be contributed to the npm Open Source Community, and can also be deployed to the company’s internal private npm registry. With EggBorn.js, not only the components can be reused, but also the business modules do in the future. Getting StartedInstallation1$ npm install -g egg-born Create a project123$ egg-born project_name$ cd project_name$ npm install Currently, EggBorn.js offers two project scaffolds: front-backend-mysql – full stack project template front – frontend-only project template Configure MySQLIf choose the template front-backend-mysql, please configure mysql connection parameters. (empty database just does well) Edit the file: src/backend/config/config.default.js12345678910111213// mysqlconfig.mysql = &#123; clients: &#123; // donot change the name __ebdb: &#123; host: '127.0.0.1', port: '3306', user: 'travis', password: '', database: 'egg-born', &#125;, &#125;,&#125;; RunStart Backend Service1$ npm run dev:backend Start Frontend Service1$ npm run dev:front EggBorn.js Structure DiagramSystem Structure Project Files Structure Module Files Structure Module DevelopmentNaming ConventionIn order to increase the business modules continuously and achieve a highly reusable effect, the namespace of all modules must be fully isolated, to avoid mutual pollution and conflict. Thus the naming convention is as follows: egg-born-module-{providerId}-{moduleName} Such as the module egg-born-module-a-version, the naming information is as follows: providerId: a moduleName: version fullName: egg-born-module-a-version relativeName: a-version frontend page route url: /a/version/{page} backend api route url: /a/version/{controller}/{action} Loading MechanismThe module supports both asynchronous loading and synchronous loading. Generally, the default is asynchronous loading. If you want to change it into synchronous loading, just add -sync suffix behind the module name, such as the module egg-born-module-aa-login-sync. Create a moduleGoto pathsrc/module, run the scaffolding to create the module files skeleton.1$ egg-born module_relative_name At present, EggBorn.js offers two module scaffolds: module – full stack module template module-front – frontend-only module template Module Frontend DevelopmentFrontend Page RouteIn the file front/src/routes.js, add the page route:123456789function load(name) &#123; return require(`./pages/$&#123;name&#125;.vue`).default;&#125;export default [ &#123; path: 'welcome/:who', component: load('welcome') &#125;, &#123; path: 'profile', component: load('profile'), meta: &#123; requiresAuth: true &#125; &#125;, &#123; path: '/login', component: load('login') &#125;,]; path: supports parameters. If the path starts with /, represent the root page component. login page component is usually configured with / component: page component meta: route metadata meta.requiresAuth: If the page component needs to be logged in, it should be set to true If you reference the page component in the page, please use the absolute path:12&lt;f7-list-item link=\"/aa/hello/welcome/You\" title=\"Welcome\"&gt;&lt;/f7-list-item&gt;&lt;f7-list-item link=\"/aa/hello/profile\" title=\"Profile\"&gt;&lt;/f7-list-item&gt; Frontend State ManagementVuex is a state management library, which is developed specifically for Vue.js applications. EggBorn.js uses Vuex to implement a fully isolated module state management mechanism. In the file front/src/store.js, add the state:123456789export default function(Vue) &#123; return &#123; state: &#123; message: 'hello world', &#125;, &#125;;&#125; Access the state of the same module in the page component:1const message = this.$local.state.message; Access the state of the other module in the page component:1const message = this.$store.state[providerId][moduleName].message; For more information, see Vuex Frontend Parameters ConfigurationIn the file front/src/config/config.js, add the configuration information:123export default &#123; mode: 1,&#125;; Access the config of the same module in the page component:1const mode = this.$config.mode; Frontend I18NIn the directory front/src/config/locale, add the i18n file, such as zh-cn.js:1234export default &#123; mode: '模式', \"Hello world! I'm %s.\": '您好，世界！我是%s。', &#125;; I18N resources can be merged globally, so as to share i18n resources through all the modules. Access the i18n resources in the page component:12const mode = this.$text('mode');const message = this.$text(\"Hello world! I'm %s.\",'zhennann'); Module Backend DevelopmentBackend API RouteIn the file backend/src/routes.js, add the api route:12345const home = require('./controller/home.js');module.exports = [ &#123; method: 'get', path: 'home/index', controller: home, action: 'index', transaction: true &#125;,]; method: get/post etc. path: Supports parameters component: Controller Component action: Controller Action. If not set, will use the last word of path automatically. transaction: Default is false. If set to true, the database transaction will be enabled. Access the api route of the same module in the frontend page component:123this.$api.get('home/index').then(data =&gt; &#123;&#125;).catch(err =&gt; &#123;&#125;); Access the api route of the other module in the frontend page component:123this.$api.get('/providerId/moduleName/home/index').then(data =&gt; &#123;&#125;).catch(err =&gt; &#123;&#125;); Backend ControllerThe backend controller is consistent with Egg.js1234567891011module.exports = app =&gt; &#123; class HomeController extends app.Controller &#123; async index() &#123; const message = await this.service.home.index(); this.ctx.success(message); &#125; &#125; return HomeController;&#125;; For more information，see Egg.js Controller Backend ServiceService is used to encapsulate the business logics. It is consistent with Egg.js123456789101112module.exports = app =&gt; &#123; class Home extends app.Service &#123; async index() &#123; const res = await this.ctx.db.queryOne('show tables'); return res; &#125; &#125; return Home;&#125;; Different from Service of Egg.js, Service of EggBorn.js uses ctx.db to manipulate the database, which automatically supports database transaction. For more information，see Egg.js Service Backend Controller InteroperabilityFor the development of large-scale web application, EggBorn.js supports interoperability between the backend controllers, such as12345678910111213const message = await this.ctx.performAction(&#123; method: 'get', url: 'home/index', query: &#123; username: 'kevin', &#125;, params: &#123; mode: 1, &#125;, body: &#123; content: 'ready', &#125;,&#125;); method: get/post etc. url: If access backend controller of the same module, please use the relative path. If access backend contrller of the other module, please use the absolute path with the beginning of / query、params、body: Same as Egg.js Controller Backend Database OperationThe backend database operation is consistent with Egg.js For more information，see Egg.js MySQL Backend Database TransactionEggBorn.js offers a more convenient database transaction processing. You just need to configure the transaction parameter in the backend api route. Service uses ctx.db to operate database.If the controller caller calls the controller callee through ctx.performAction, the database transaction status is as follow: Controller Caller Config Controller Callee Config Controller Callee Status true true true true false true false true true false false false Backend Parameters ConfigurationIn the file backend/src/config/config.js, add the configuration information:1234567module.exports = appInfo =&gt; &#123; const config = &#123;&#125;; config.message = \"Hello world! I'm %s.\"; return config;&#125;; Access the config of the same module:1const message = this.ctx.config.message; Backend I18NIn the directory backend/src/config/locale, add the i18n file, such as zh-cn.js:1234module.exports = &#123; \"Hello world! I'm %s.\": '您好，世界！我是%s。', 'not found': '未发现',&#125;; I18N resources can be merged globally, so as to share i18n resources through all the modules. Access the i18n resources:12const notFound = this.ctx.text('not found');const message = this.ctx.text(\"Hello world! I'm %s.\", 'zhennann'); Backend Error HandingIn the file backend/src/config/errors.js, add the error code:1234// error code should start from 1001module.exports = &#123; 1001: 'not found',&#125;; Return error object:1this.ctx.fail(1001); Throw error exception:1this.ctx.throw(1001); Module ManagementModule DependenciesEggBorn.js manages module dependencies through package.json. For example, module aa-module1 depends on aa-module2, and the following configuration is needed in the file package.json of the module aa-module1:123456789101112&#123; \"name\": \"egg-born-module-aa-module1\", \"version\": \"0.0.1\", \"eggBornModule\": &#123; \"dependencies\": &#123; \"aa-module2\": \"0.0.1\" &#125; &#125;, \"dependencies\": &#123; \"egg-born-module-aa-module2\": \"^0.0.1\" &#125;&#125; Add &quot;egg-born-module-aa-module2&quot;: &quot;^0.0.1&quot; so as to install the module aa-module2 automatically when installing module aa-module1 Module Data VersionGenerally Modules should operate the database. The database structure is also possible to change when the module version upgrade. EggBorn.js manage the module data version so as to facilitate the accumulation of business modules. In the file package.json of the module, configure fileVersion as the current data version of the module:1234567&#123; \"name\": \"egg-born-module-aa-module1\", \"version\": \"0.0.1\", \"eggBornModule\": &#123; \"fileVersion\": 1 &#125;&#125; Add backend api route:1&#123; method: 'post', path: 'version/update', controller: version &#125; Add backend controller:1234567891011module.exports = app =&gt; &#123; class VersionController extends app.Controller &#123; async update() &#123; await this.service.version.update(this.ctx.getInt('version')); this.ctx.success(); &#125; &#125; return VersionController;&#125;; Add backend service:1234567891011121314module.exports = app =&gt; &#123; class Version extends app.Service &#123; async update(version) &#123; if (version === 1) &#123; // do something &#125; &#125; &#125; return Version;&#125;; When the project started, EggBorn.js detects the change of the module data version automatically, and executes the corresponding api route to upgrade the data version. Module PublishWhen the module in the project is stable, you can publish and contribute the module to the Open Source Community. You can also create private npm registry in your company, and then publish the module there, so as to form company assets for easy reuse. 12345$ cd path/to/module -- Goto the module directory$ npm install -- Install module dependencies$ npm run build:front -- Build frontend$ npm run build:backend -- Build backend$ npm publish -- Publish to npm registry Test Driven DevelopmentOnly backend test driven development is supported currently. Backend Controller TestIn the directory backend/test/controller, add controller test file:1234567891011// controller/home.test.jsconst &#123; app, mockUrl, assert &#125; = require('egg-born-mock')(__dirname);describe('test/controller/home.test.js', () =&gt; &#123; it('action:index', async () =&gt; &#123; const result = await app.httpRequest().get(mockUrl('home/index')); assert(result.body.code === 0); &#125;);&#125;); Backend Service TestIn the directory backend/test/service, add service test file:123456789101112// service/home.test.jsconst &#123; app, mockUrl, assert &#125; = require('egg-born-mock')(__dirname);describe('test/service/home.test.js', () =&gt; &#123; it('index', async () =&gt; &#123; const ctx = app.mockContext(&#123; mockUrl: mockUrl() &#125;); const message = await ctx.service.home.index(); assert(message); &#125;);&#125;); Run TestRun test in the project root directory:12$ npm run test:backend$ npm run cov:backend Frontend Framework ConfigurationFrontend BootstrapFrontend provides two bootstraps Vue.js + Framework7 Vue.js + Vue Router Framework7 is a mobile UI liabrary with built-in routing mechanism.Vue Router is the official routing library for Vue.js. Vue Router can be used with other various UI libraries. Switch in the file src/front/main.js:12345678910// choose one// framework7import main from './framework7/main.js';// vuerouter// import main from './vuerouter/main.js';// exportexport default main; Frontend Parameters ConfigurationThe parameters of the file src/front/config/config.js can override the parameters of the modules1234567export default&#123; modules: &#123; 'aa-hello': &#123; mode: 2, &#125;, &#125;,&#125;; Frontend I18NFramework i18n resources can override the modules’s ones. In the directory src/front/config/locale, add the i18n file, such as zh-cn.js:123export default &#123; mode: '模式',&#125;; Backend Framework ConfigurationBackend FrameworkEggBorn.js backend framework is based on Egg.js，so supports all of the features provided by Egg.js For more information，see Egg.js Backend Parameters ConfigurationThe parameters of the file src/backend/config/config.default.js can override the parameters of the modules.123456789101112module.exports = appInfo =&gt; &#123; const config = &#123;&#125;; // module config config.modules = &#123; 'aa-hello': &#123; mode: 2, &#125;, &#125;; return config;&#125;; Backend I18NFramework i18n resources can override the modules’s ones. In the directory src/backend/config/locale, add the i18n file, such as zh-cn.js:123module.exports = &#123; mode: '模式',&#125;; Project DeploymentBuild Frontend1$ npm run build:front Start Backend1$ npm run start:backend Stop Backend1$ npm run stop:backend Backend Start ParametersEdit the file build/config.js:12345// backendconst backend = &#123; port: 7002, hostname: '127.0.0.1',&#125;; Nginx ConfigurationSuggest to use Nginx hosting frontend static resources and reverse proxy backend service1234567891011121314151617181920server &#123; listen 80; server_name example.com www.example.com; set $node_port 7002; root /path/to/www; location /api/ &#123; proxy_http_version 1.1; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_pass http://127.0.0.1:$node_port$request_uri; proxy_redirect off; &#125;&#125; GitHub Contribution Any questions, welcome to submit issue, or fork and submit PR!","categories":[{"name":"docs","slug":"docs","permalink":"http://egg-born.org/en/categories/docs/"}],"tags":[]}]}